import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart
import asyncio
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏—Ü–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –õ–ò–ß–ö–ò (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞) ---

def private_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üîû", url="https://t.me/virt_chat_ua1/134421"),
        InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy"),
        InlineKeyboardButton("–Ø —Ö–æ—á—É –∑ —Ç–æ–±–æ—é –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∞ —Ç–∏? ü´¶", callback_data="chat_start"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator_info"),
    )
    return kb

# --- –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç / –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@dp.message_handler(commands=["start"])
async def start_private(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç üòá –Ø ‚Äî –õ–µ—Ä–∞, —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞.

–û–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ üòâ",
            reply_markup=private_keyboard()
        )

# --- –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–Ø —Ö–æ—á—É –∑ —Ç–æ–±–æ—é –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∞ —Ç–∏? ü´¶" ---
@dp.callback_query_handler(lambda c: c.data == "chat_start")
async def start_chat_callback(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤—ñ—Ç üòá", disable_notification=True)

# --- –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–ü—Ä–æ —Ç–≤–æ—Ä—Ü—è" ---
@dp.callback_query_handler(lambda c: c.data == "creator_info")
async def creator_info_callback(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî <a href='https://t.me/nikita_onoff'>@nikita_onoff</a>
"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ
"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)

"
        "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É <a href='https://t.me/+d-pPVpIW-UBkZGUy'>brEAst</a>, "
        "—Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.

"
        "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó <a href='https://openai.com'>OpenAI</a>. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂"
    )

# --- –ì–†–£–ü–ü–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---

def group_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üîû", url="https://t.me/virt_chat_ua1/134421"),
        InlineKeyboardButton("–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è‚Ä¶ ü´¶", url="https://t.me/Lera_Bot_10")
    )
    return kb

@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"])
async def group_handler(message: types.Message):
    text = message.text.lower()

    if "–ø—Ä–∏–≤—ñ—Ç" in text or "—Ö—Ç–æ —Ç—É—Ç" in text or "—î —Ö—Ç–æ—Å—å" in text or "–Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ" in text:
        await message.reply(
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –î—É–∂–µ —Ö–æ—á—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –¥—ñ–≤—á–∞—Ç‚Ä¶ ü´¶",
            reply_markup=group_keyboard()
        )

# --- RUN ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
