import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import openai
import asyncio
import os
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MODEL_NAME = "gpt-4.1-mini"
CHAT_ID_LOGS = None  # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
AUTOPOST_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MESSAGE_COUNT_TRIGGER = 5

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
chat_message_counts = {}
last_post_time = {}

# –ö–Ω–æ–ø–∫–∏
def main_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
        InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy"),
        InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask_question"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")
    )
    return markup

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    text = """
–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã
–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏.
"""
    await message.answer(text.strip(), reply_markup=main_menu())

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ —Ç–≤–æ—Ä—Ü—è"
@dp.callback_query_handler(lambda c: c.data == 'about_creator')
async def about_creator(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    text = (
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
        "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy), —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
        "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó [OpenAI](https://openai.com). –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂"
    )
    await bot.send_message(callback_query.from_user.id, text, parse_mode="Markdown")

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è"
@dp.callback_query_handler(lambda c: c.data == 'ask_question')
async def ask_question(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    text = (
        "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n"
        "–Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é GPT, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏, –¥—É–º–∫–∞–º–∏, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –±–µ—Å—ñ–¥—É."
    )
    await bot.send_message(callback_query.from_user.id, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–° (—Å AI)
@dp.message_handler(lambda message: message.chat.type == 'private')
async def gpt_response(message: types.Message):
    try:
        response = openai.ChatCompletion.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî —Ñ–ª—ñ—Ä—Ç–æ–≤–∞ AI-–¥—ñ–≤—á–∏–Ω–∞ –õ–µ—Ä–∞, –≥–æ–≤–æ—Ä–∏ –Ω—ñ–∂–Ω–æ, –≥—Ä–∞–π–ª–∏–≤–æ —ñ —Ç–µ–ø–ª–æ."},
                {"role": "user", "content": message.text}
            ]
        )
        reply_text = response.choices[0].message.content.strip()
        await message.reply(reply_text)
    except Exception as e:
        await message.reply("ü•∫ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.error(f"GPT error: {e}")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type in ['group', 'supergroup'])
async def handle_group_message(message: types.Message):
    chat_id = message.chat.id
    chat_message_counts[chat_id] = chat_message_counts.get(chat_id, 0) + 1

    now = datetime.utcnow()
    last_time = last_post_time.get(chat_id)

    if chat_message_counts[chat_id] >= MESSAGE_COUNT_TRIGGER or not last_time or (now - last_time).total_seconds() >= AUTOPOST_INTERVAL:
        await bot.send_message(chat_id, 
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
            reply_markup=main_menu()
        )
        chat_message_counts[chat_id] = 0
        last_post_time[chat_id] = now

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
