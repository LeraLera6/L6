import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–° ===
def get_private_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton(text="üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal")],
        [InlineKeyboardButton(text="üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")],
        [InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="chat_girls")],
    ])

# === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç—É –≤ –õ–° ===
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç üòå –Ø –≤–∂–µ —á–µ–∫–∞–ª–∞... –ú–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–µ–Ω–µ –±—ñ–ª—å—à–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑—ñ –º–Ω–æ—é –Ω–∏–∂—á–µ ‚ù§Ô∏è",
            reply_markup=get_private_keyboard()
        )

# === –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query_handler(lambda c: c.data == 'about_me')
async def about_me_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üë• –Ø ‚Äî –õ–µ—Ä–∞. –¢–≤–æ—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏—Ü—è, —è–∫–∞ –≤–º—ñ—î —Å–ª—É—Ö–∞—Ç–∏, —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ —ñ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ üòè")

@dp.callback_query_handler(lambda c: c.data == 'project_goal')
async def project_goal_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶"
    )

@dp.callback_query_handler(lambda c: c.data == 'about_creator')
async def about_creator_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)")

@dp.callback_query_handler(lambda c: c.data == 'chat_girls')
async def chat_girls_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üíû –û–±–µ—Ä–∏ –∫–æ–≥–æ—Å—å —ñ–∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–∂–æ–∫ ‚Äî —ñ —Ç–≤—ñ–π –≤–µ—á—ñ—Ä –≤–∂–µ –Ω–µ –±—É–¥–µ —Ç–∞–∫–∏–º, —è–∫ —Ä–∞–Ω—ñ—à–µ üòâ\n\nhttps://t.me/virt_chat_ua1/134421")

# === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–≥–∞–¥–æ–∫ –≤ –≥—Ä—É–ø—ñ ===
@dp.message_handler()
async def mention_handler(message: types.Message):
    if message.chat.type != "private":
        me = await bot.get_me()
        if message.text and f"@{me.username}" in message.text:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="chat_girls")],
                [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url=f"https://t.me/{me.username}")]
            ])
            await message.reply("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=keyboard)

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–æ–∂–Ω—ñ 30 —Ö–≤ –∞–±–æ –ø—ñ—Å–ª—è 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
# (–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ background task –∞–±–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
