import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart, Text

API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("API_TOKEN is not set. Please define it in environment variables.")

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –õ–°
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ–µ–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ —á–∞—Ç", url="https://t.me/+d-pPVpIW-UBkZGUy")
)

@dp.message_handler(CommandStart())
async def start_handler(message: types.Message):
    if message.chat.type == "private":
        user_name = message.from_user.first_name
        text = (f"<b>–ü—Ä–∏–≤—ñ—Ç, {user_name} üòá</b>\n\n"
                "–Ø —â–µ —É —Å—Ç–∞–Ω—ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–∂–µ –º–æ–∂—É —Ç—Ä–æ—Ö–∏ –∑–∞—á–∞—Ä—É–≤–∞—Ç–∏ —Ç–µ–±–µ.\n"
                "–•–æ—á–µ—à –±–ª–∏–∂—á–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑—ñ –º–Ω–æ—é –∞–±–æ –∑ –º–æ—ó–º–∏ –ø–æ–¥—Ä—É–≥–∞–º–∏? –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–æ:")
        await message.answer(text, reply_markup=main_menu)

@dp.callback_query_handler(Text(equals="about_me"))
async def callback_about_me(call: types.CallbackQuery):
    await call.message.answer("<b>–Ø –ª—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ, –∞–ª–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –º–æ–∂—É —Å—Ç–∞—Ç–∏ —Ç—ñ—î—é, —è–∫—É —Ç–∏ —Ö–æ—Ç—ñ–≤. üòâ</b>")
    await call.answer()

@dp.callback_query_handler(Text(equals="project_goal"))
async def callback_project_goal(call: types.CallbackQuery):
    await call.message.answer(
        "<b>–¶—ñ–ª—å –º–æ—î—ó –ø–æ—è–≤–∏ –ø—Ä–æ—Å—Ç–∞ ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ñ–ª—ñ—Ä—Ç —Ç–∞ —Ç–µ–ø–ª–æ—Ç—É, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ—ó—Ö –ø–æ–¥—Ä—É–∂–æ–∫ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.</b>")
    await call.answer()

@dp.callback_query_handler(Text(equals="creator"))
async def callback_creator(call: types.CallbackQuery):
    await call.message.answer(
        "<b>–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∞ —Ç–æ—á–Ω–∏–π. –í—ñ–Ω –ª—é–±–∏—Ç—å –∑–∞–≥–ª—è–¥–∞—Ç–∏ –≤ –≥–ª–∏–±–∏–Ω—É —Å—É—Ç—ñ —ñ–¥–µ—ó —ñ —Ä–æ–∑–∫—Ä–∏–≤–∞—Ç–∏ —Ç–µ, —â–æ —ñ–Ω—à—ñ –æ–º–∏–Ω–∞—é—Ç—å.</b>")
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
