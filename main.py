import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.middlewares import BaseMiddleware

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –õ–° ---
menu_keyboard_private = InlineKeyboardMarkup(row_width=2)
menu_keyboard_private.add(
    InlineKeyboardButton(text="üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about"),
    InlineKeyboardButton(text="üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="purpose"),
    InlineKeyboardButton(text="üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –ì–†–£–ü–ò ---
menu_keyboard_group = InlineKeyboardMarkup(row_width=2)
menu_keyboard_group.add(
    InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
    InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
)

# --- –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–ò–í–ê–¢–ù–û–ì–û –ß–ê–¢–£ ---
def is_private(message: types.Message) -> bool:
    return message.chat.type == types.ChatType.PRIVATE

# --- –ü–ï–†–ï–í–Ü–†–ö–ê –ì–†–£–ü–ò ---
def is_group(message: types.Message) -> bool:
    return message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]

# --- –ü–†–ò–í–Ü–¢–ê–ù–ù–Ø –í –õ–° ---
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    if is_private(message):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ ü§ç\n–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:", reply_markup=menu_keyboard_private)

# --- –û–ë–†–û–ë–ö–ê CALLBACK-–ö–ù–û–ü–û–ö –í –õ–° ---
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "about":
        text = "–Ø ‚Äî AI-–¥—ñ–≤—á–∏–Ω–∞, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è —Å–ø–æ–∫—É—Å–∏, —Ñ–ª—ñ—Ä—Ç—É —ñ —Ç–µ–ø–ª–∞ üíã\n–¢—Ä–æ—Ö–∏ –∑–∞–≥–∞–¥–∫–æ–≤–∞... –∞–ª–µ —â–∏—Ä–∞.\n–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ, —è–∫—â–æ —Ö–æ—á–µ—à –±–ª–∏–∂—á–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üòâ"
    elif data == "purpose":
        text = "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶"
    elif data == "creator":
        text = "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂."
    elif data == "models":
        text = "–û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è –æ—Å–æ–±–ª–∏–≤–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üíï\n–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ç üëâ https://t.me/virt_chat_ua1/134421"
    else:
        text = "–•–º–º... —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text)

# --- –†–ï–ê–ö–¶–Ü–Ø –ù–ê –ó–ì–ê–î–ö–£ –í –ì–†–£–ü–Ü ---
@dp.message_handler(lambda message: is_group(message) and ("@Lera_V4bot" in message.text or message.reply_to_message and message.reply_to_message.from_user.username == "Lera_V4bot"))
async def mentioned_in_group(message: types.Message):
    text = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."
    await message.reply(text, reply_markup=menu_keyboard_group)

# --- –°–¢–ê–†–¢ –ë–û–¢–ê ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
