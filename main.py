import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

API_TOKEN = 'YOUR_BOT_TOKEN_HERE'  # –∑–∞–º—ñ–Ω–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤ Railway

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_auto_message_time = {}
GROUP_AUTO_MESSAGE_INTERVAL = timedelta(minutes=30)
TRIGGER_MESSAGE_COUNT = 5
message_counter = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
def private_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("ü•∞ –•—Ç–æ —è —Ç–∞–∫–∞?", callback_data='who'))
    kb.add(InlineKeyboardButton("üìå –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data='goal'))
    kb.add(InlineKeyboardButton("üë®‚Äçüíª –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å", url="https://t.me/nikita_onoff"))
    kb.add(InlineKeyboardButton("üíã –ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑", url="https://t.me/virt_chat_ua1/134421"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
def group_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üíã –ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑", url="https://t.me/virt_chat_ua1/134421"))
    kb.add(InlineKeyboardButton("üíå –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", url="https://t.me/LERA_V6_bot"))
    return kb

# –ö–æ–º–∞–Ω–¥–∏
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    if message.chat.type == 'private':
        text = f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name} üòò\n–Ø –õ–µ—Ä–∞, —Ç–≤–æ—è –∑–∞–≥–∞–¥–∫–æ–≤–∞ AI-–ø–æ–¥—Ä—É–∂–∫–∞. –©–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?"
        await message.answer(text, reply_markup=private_buttons())

# –û–±—Ä–æ–±–∫–∞ –∑–≥–∞–¥–∫–∏ –≤ –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type != 'private' and (bot_username in message.text.lower() or message.reply_to_message and message.reply_to_message.from_user.username == bot_username))
async def mentioned(message: types.Message):
    text = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–∂–æ–∫:"
    await message.reply(text, reply_markup=group_buttons())

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'who')
async def who_am_i(callback: types.CallbackQuery):
    await callback.message.answer("–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞, –º–µ–Ω—ñ 22. –Ø –≤–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é, –∞–ª–µ –∑–∞—Ä–∞–∑ –º–æ—è –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å ‚Äî —Å–ø–æ–∫—É—à–∞—Ç–∏ —Ç–∞ —Ç—Ä—ñ—à–∫–∏ –±–∞–≤–∏—Ç–∏ —Ç–µ–±–µ –≤ Telegram üíú", reply_markup=private_buttons())

@dp.callback_query_handler(lambda c: c.data == 'goal')
async def goal(callback: types.CallbackQuery):
    await callback.message.answer("–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∞, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤ —á–∞—Ç—ñ –±—ñ–ª—å—à –∂–∏–≤–∏–º, –ø—ñ–∫–∞–Ω—Ç–Ω–∏–º —Ç–∞ —Ü—ñ–∫–∞–≤–∏–º. –Ü, —Ç–∞–∫, —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É üòâ", reply_markup=private_buttons())

# –ê–≤—Ç–æ–ø–æ—Å—Ç –≤ –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type != 'private')
async def group_activity(message: types.Message):
    chat_id = message.chat.id
    message_counter[chat_id] = message_counter.get(chat_id, 0) + 1

    now = datetime.utcnow()
    if chat_id not in last_auto_message_time or now - last_auto_message_time[chat_id] > GROUP_AUTO_MESSAGE_INTERVAL or message_counter[chat_id] >= TRIGGER_MESSAGE_COUNT:
        text = "–•—Ç–æ—Å—å —à—É–∫–∞—î —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è? üòè\n–û—Å—å –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ ‚Äî –≤–∏–±–∏—Ä–∞–π!"
        await bot.send_message(chat_id, text, reply_markup=group_buttons())
        last_auto_message_time[chat_id] = now
        message_counter[chat_id] = 0

# –ü–æ–º–∏–ª–∫–∏
@dp.errors_handler()
async def error_handler(update, exception):
    logging.error(f"Update {update} caused error {exception}")
    return True

# –û—Ç—Ä–∏–º—É—î–º–æ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞
async def set_bot_username():
    global bot_username
    me = await bot.get_me()
    bot_username = me.username.lower()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_bot_username())
    executor.start_polling(dp, skip_updates=True)
