import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
API_TOKEN = os.getenv("API_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
private_keyboard = InlineKeyboardMarkup(row_width=1)
private_keyboard.add(
    InlineKeyboardButton("üíã –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_lera"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
group_keyboard = InlineKeyboardMarkup(row_width=1)
group_keyboard.add(
    InlineKeyboardButton("üíã –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ùî –ó–∞–¥–∞—Ç–∏ –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", url="https://t.me/LERA_V6_bot")
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"] and (message.reply_to_message and message.reply_to_message.from_user.username == "LERA_V6_bot" or f"@LERA_V6_bot" in message.text))
async def mentioned_in_group(message: types.Message):
    await message.reply("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=group_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ –õ–°
@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def start_private(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞. –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ. ", reply_markup=private_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ –º–µ–Ω–µ
@dp.callback_query_handler(Text(equals="about_lera"))
async def about_lera(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏. –í–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –º–∞–≥—ñ—é —Å–ø–æ–∫—É—Å–∏ üòâ\n–õ—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ, –∞ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –º–æ–∂—É —Å—Ç–∞—Ç–∏ —Ç—ñ—î—é, —è–∫—É —Ç–∏ —à—É–∫–∞–≤‚Ä¶")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É
@dp.callback_query_handler(Text(equals="project_goal"))
async def project_goal(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è
@dp.callback_query_handler(Text(equals="about_creator"))
async def about_creator(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ")
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
