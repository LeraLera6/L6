import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart, Text
from aiogram.dispatcher import filters
from aiogram.contrib.middlewares.logging import LoggingMiddleware

API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("BOT_TOKEN is missing in environment variables")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç—É ---
chat_keyboard = InlineKeyboardMarkup(row_width=1)
chat_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –õ–µ—Ä—É", callback_data="about_lera"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")
)

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–° ---
pm_keyboard = InlineKeyboardMarkup(row_width=1)
pm_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_lera"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")
)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.chat.type == "private":
        text = (
            f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name} üòá\n\n"
            "–Ø —â–µ —É —Å—Ç–∞–Ω—ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–∂–µ –º–æ–∂—É —Ç—Ä–æ—Ö–∏ –∑–∞—á–∞—Ä—É–≤–∞—Ç–∏ —Ç–µ–±–µ.\n"
            "–•–æ—á–µ—à –±–ª–∏–∂—á–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑—ñ –º–Ω–æ—é –∞–±–æ –∑ –º–æ—ó–º–∏ –ø–æ–¥—Ä—É–∂–∫–∞–º–∏? –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–æ:"
        )
        await message.answer(text, reply_markup=pm_keyboard)

@dp.message_handler(filters.Text(equals=["–õ–µ—Ä–∞", "@Lera_V6_bot", "@Lera_V4bot"], ignore_case=True))
async def mention_handler(message: types.Message):
    if message.chat.type != "private":
        text = (
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."
        )
        await message.reply(text, reply_markup=chat_keyboard)

@dp.callback_query_handler(lambda c: c.data == "about_lera")
async def about_lera(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏. –í–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –º–∞–≥—ñ—é —Å–ø–æ–∫—É—Å–∏ üòâ\n"
        "–õ—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ, –∞ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –º–æ–∂—É —Å—Ç–∞—Ç–∏ —Ç—ñ—î—é, —è–∫—É —Ç–∏ —à—É–∫–∞–≤...",
        reply_markup=pm_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "project_goal")
async def goal_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "–¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, \n"
        "–ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É."
    )

@dp.callback_query_handler(lambda c: c.data == "creator")
async def creator_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, \n"
        "—ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö—ñ—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ"
    )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
