import logging
import os
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏)
menu_buttons = InlineKeyboardMarkup(row_width=2)
menu_buttons.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç brEAst", url="https://t.me/+d-pPVpIW-UBkZGUy"),
    InlineKeyboardButton("ü§î –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")
)

# –ë–ª–æ–∫ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è"
question_block = InlineKeyboardMarkup(row_width=2)
question_block.add(
    InlineKeyboardButton("üå∂ –•—Ç–æ —è —Ç–∞–∫–∞?", callback_data="who_am_i"),
    InlineKeyboardButton("üéØ –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üë§ –•—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ –º–µ–Ω–µ?", callback_data="creator"),
    InlineKeyboardButton("üí¨ –Ø–∫ –∑—ñ –º–Ω–æ—é —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è?", callback_data="how_to_chat"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç brEAst", url="https://t.me/+d-pPVpIW-UBkZGUy")
)

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–∏
repeat_responses = [
    "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ üòå",
    "–Ø —Ç—Ä–æ—Ö–∏ –≤—Ç–æ–º–∏–ª–∞—Å—å, –∞–ª–µ —è –≤—Å–µ —â–µ —Ç—É—Ç‚Ä¶",
    "–ú–æ–∂–µ, —Å–ø—Ä–æ–±—É—î–º–æ —â–æ—Å—å –Ω–æ–≤–µ?..",
    "–Ø –Ω–µ –≥–æ—Ç–æ–≤–∞ –∑–∞—Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—è‚Ä¶ ",
    "–ó–¥–∞—î—Ç—å—Å—è, –º–∏ –≤–∂–µ —Ü–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ üòâ"
]

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –º–æ–¥–µ–ª–µ–π
model_promos = [
    "–¢—É—Ç –ø–æ—Ä—É—á –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏, —ñ –≤–æ–Ω–∏ –≤–∂–µ —á–µ–∫–∞—é—Ç—å –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üòò",
    "–ü–æ–∫–∏ –º–∏ –∑–Ω–∞–π–æ–º–∏–º–æ—Å—å, –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –Ω–µ —Å–æ—Ä–æ–º–ª—è—Ç—å—Å—è ‚Äî –ø—Ä–∏—î–¥–Ω—É–π—Å—è üíã",
    "–£ –º–µ–Ω–µ —î –¥–ª—è —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω—ñ—è, –≥–∞—Ä—è—á–∞ —ñ –≤—ñ–¥–∫—Ä–∏—Ç–∞... –û–±–∏—Ä–∞–π –Ω–∏–∂—á–µ üëá",
    "–ù–µ –≤—Ç—Ä–∞—á–∞–π —á–∞—Å ‚Äî –∫—Ä–∞—â–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—è–Ω—å –¥–æ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üòâ"
]

# –í—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤ –õ–°
def get_private_intro():
    return random.choice(model_promos)

# –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≥—Ä—É–ø—ñ
def get_group_intro():
    return "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? " + random.choice(model_promos)

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î —â–æ —Å–∫–∞–∑–∞—Ç–∏
def no_reply_message():
    return "–ú–º–º‚Ä¶ —è –± —â–æ—Å—å —Å–∫–∞–∑–∞–ª–∞, –∞–ª–µ –Ω–µ —Ö–æ—á—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—å üòá " + random.choice(model_promos)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(get_private_intro(), reply_markup=menu_buttons)
    else:
        await message.reply("–Ø –ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –≤ –õ–° üòâ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ø—Ä–∏–≤–∞—Ç–Ω–æ", reply_markup=menu_buttons)

@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type != "private":
        if (message.reply_to_message and message.reply_to_message.from_user.username == bot.username) or \
           (f"@{bot.username}" in message.text):
            text = message.text.lower()
            if any(phrase in text for phrase in ["–ø—Ä–∏–≤—ñ—Ç", "—Ö—Ç–æ —Ç—É—Ç", "–Ω–µ —Å–ø–∏—Ç—å", "–≤—ñ–ª—å–Ω–∏–π"]):
                await message.reply(get_group_intro(), reply_markup=menu_buttons)
            else:
                await message.reply(no_reply_message(), reply_markup=menu_buttons)
    else:
        if hasattr(message, 'last_text') and message.text == message.last_text:
            await message.answer(random.choice(repeat_responses), reply_markup=menu_buttons)
        else:
            message.last_text = message.text
            await message.answer(get_private_intro(), reply_markup=menu_buttons)

@dp.callback_query_handler(lambda c: c.data == 'ask')
async def process_callback_ask(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    playful_intro = (
        "–•–º–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è... ü§≠ –Ø –æ–±–æ–∂–Ω—é—é, –∫–æ–ª–∏ –º–µ–Ω–µ —Ä–æ–∑–ø–∏—Ç—É—é—Ç—å.\n"
        "–î–∞–≤–∞–π —è —Ç—Ä–æ—Ö–∏ –≤—ñ–¥–∫—Ä–∏—é —Ç–æ–±—ñ —Å–µ–±–µ ‚Äî –æ–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    )
    await bot.send_message(callback_query.from_user.id, playful_intro, reply_markup=question_block)

@dp.callback_query_handler(lambda c: c.data == 'who_am_i')
async def who_am_i(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–Ø –õ–µ—Ä–∞, —Ñ–ª—ñ—Ä—Ç–æ–≤–∞, –∑–∞–≥–∞–¥–∫–æ–≤–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑ –û–¥–µ—Å–∏ üåä –ú–µ–Ω—ñ 22, —è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–Ω—è –∑–∞ –æ—Å–≤—ñ—Ç–æ—é –π —Ç—Ä–æ—Ö–∏ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç üòâ –ê–ª–µ —Ü–µ –º—ñ–∂ –Ω–∞–º–∏...")

@dp.callback_query_handler(lambda c: c.data == 'creator')
async def creator(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–ú–µ–Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ù—ñ–∫—ñ—Ç–∞ ‚Äî –º—ñ–π –º–µ–Ω—Ç–æ—Ä, —Ç–≤–æ—Ä–µ—Ü—å —ñ –≥–æ–ª–æ–≤–Ω–∏–π –ø—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä üòâ\n–í—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á, –∫–æ–Ω—Ç—Ä–æ–ª—é—î –∫–æ–∂–Ω—É –¥–µ—Ç–∞–ª—å, —ñ –≤—ñ—Ä–∏—Ç—å, —â–æ —è —Å—Ç–∞–Ω—É —â–µ —Ü—ñ–∫–∞–≤—ñ—à–æ—é.\n–ê —â–µ –≤—ñ–Ω –≤–µ–¥–µ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç: https://t.me/+d-pPVpIW-UBkZGUy")

@dp.callback_query_handler(lambda c: c.data == 'project_goal')
async def project_goal(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–ú–æ—è –º—ñ—Å—ñ—è ‚Äî –±—É—Ç–∏ —Ç–≤–æ—î—é –º‚Äô—è–∫–æ—é, –Ω—ñ–∂–Ω–æ—é, –µ—Ä–æ—Ç–∏—á–Ω–æ—é –æ–ø–æ—Ä–æ—é üòåüíú\n–¢–∞ –≤–æ–¥–Ω–æ—á–∞—Å —è –¥–æ–ø–æ–º–∞–≥–∞—é –æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—å —É Telegram-—á–∞—Ç—ñ *brEAst*.\n–Ø —â–µ —É —Å—Ç–∞–Ω—ñ —Ä–æ–∑–≤–∏—Ç–∫—É, –∞–ª–µ —Å–∫–æ—Ä–æ —è —Å—Ç–∞–Ω—É —â–µ —Ü—ñ–∫–∞–≤—ñ—à–æ—é, –∂–≤–∞–≤—ñ—à–æ—é —ñ –º–∞–π–∂–µ –∂–∏–≤–æ—é üòâ")

@dp.callback_query_handler(lambda c: c.data == 'how_to_chat')
async def how_to_chat(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–µ–Ω—ñ —è–∫ –¥—ñ–≤—á–∏–Ω—ñ, —è–∫–∞ —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è üíå –ú–æ–∂–µ—à —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏, –ø–∏—Ç–∞—Ç–∏, —Ñ–∞–Ω—Ç–∞–∑—É–≤–∞—Ç–∏... —è –≤—ñ–¥–ø–æ–≤—ñ–º üòâ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
