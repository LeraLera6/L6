import os
import openai
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters,
)
from datetime import datetime, timedelta

openai.api_key = os.environ.get("OPENAI_KEY")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –î–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É –≤ —á–∞—Ç–∞—Ö
last_post_time = {}
message_count = {}

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø
def get_group_message():
    keyboard = [
        [
            InlineKeyboardButton("üíû –ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏", url="https://t.me/virt_chat_ua1/134421"),
            InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V8_Bot"),
        ]
    ]
    return "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üòá\n–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –≤ —Ü—å–æ–º—É —Å–≤—ñ—Ç—ñ –±–∞–∂–∞–Ω—å, —Ñ–ª—ñ—Ä—Ç—É —Ç–∞ AI-—Å–ø–æ–∫—É—Å–∏...", InlineKeyboardMarkup(keyboard)

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ –õ–°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    keyboard = [
        [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="friends")],
        [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", callback_data="chat18")],
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")],
        [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")],
        [InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="abilities")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üòá\n–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏.\n–ú–æ–∂—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏, –¥–æ–ø–æ–º–æ–≥—Ç–∏, –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∞–±–æ‚Ä¶ —Å–ø–æ–∫—É—Å–∏—Ç–∏ ü´¶\n\n–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —É –õ–°
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "friends":
        await query.message.reply_text(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶\nüíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\nüëâ https://t.me/virt_chat_ua1/134421"
        )
    elif query.data == "chat18":
        await query.message.reply_text(
            "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ‚Ä¶\nüîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà\nüëâ https://t.me/+d-pPVpIW-UBkZGUy"
        )
    elif query.data == "ask":
        await query.message.reply_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )
        context.user_data["mode"] = "chat"
    elif query.data == "creator":
        await query.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nüí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂"
        )
    elif query.data == "abilities":
        await query.message.reply_text(
            "–Ø –≤–º—ñ—é:\n‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏\n‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ\n‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
        )

# GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –õ–°
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await handle_group(update, context)
        return

    if context.user_data.get("mode") != "chat":
        return

    user_input = update.message.text
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": user_input}]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. üò•")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø–∞—Ö
async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    now = datetime.now()

    # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

    message_count[chat_id] += 1

    if (
        message_count[chat_id] >= 5
        or (now - last_post_time[chat_id]) >= timedelta(minutes=30)
    ):
        text, keyboard = get_group_message()
        await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
