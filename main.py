import logging
from aiogram import Bot, Dispatcher, types, executor
import openai
import asyncio
import os

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_ASSISTANT_ID = os.getenv("GPT_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ============================== GPT Assistant ==============================

async def ask_openai_assistant(message_text, thread_id=None):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not thread_id:
            thread = openai.beta.threads.create()
            thread_id = thread.id

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞
        openai.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_text
        )

        # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=OPENAI_ASSISTANT_ID,
        )

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            if status.status == "completed":
                break
            await asyncio.sleep(1)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        messages = openai.beta.threads.messages.list(thread_id=thread_id)
        reply = messages.data[0].content[0].text.value
        return reply

    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ ü•∫ –°–ø—Ä–æ–±—É–π —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ"

# ============================== –õ–° ==============================

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
    keyboard.add("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+")
    keyboard.add("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è")
    keyboard.add("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è")
    keyboard.add("üß† –©–æ —è –≤–º—ñ—é")
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üíã –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å üëá",
        reply_markup=keyboard,
    )

@dp.message_handler(lambda message: message.text == "üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
async def send_models(message: types.Message):
    await message.reply(
        "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶
üíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:
üëâ https://t.me/virt_chat_ua1/134421"
    )

@dp.message_handler(lambda message: message.text == "üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+")
async def send_chat_link(message: types.Message):
    await message.reply(
        "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ‚Ä¶
üîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà
üëâ https://t.me/+d-pPVpIW-UBkZGUy"
    )

@dp.message_handler(lambda message: message.text == "üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def start_chat(message: types.Message):
    await message.reply("–ü–∏—à–∏ –º–µ–Ω—ñ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã")

@dp.message_handler(lambda message: message.text == "üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è")
async def about_creator(message: types.Message):
    await message.reply(
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff
"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ
"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)

"
        "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.

"
        "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂"
    )

@dp.message_handler(lambda message: message.text == "üß† –©–æ —è –≤–º—ñ—é")
async def about_skills(message: types.Message):
    await message.reply(
        "–Ø –≤–º—ñ—é:
"
        "‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
"
        "‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏
"
        "‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ
"
        "‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
    )

@dp.message_handler()
async def gpt_reply(message: types.Message):
    reply = await ask_openai_assistant(message.text)
    await message.reply(reply)

# ============================== –°—Ç–∞—Ä—Ç ==============================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
