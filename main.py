import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import asyncio
import os
from openai import OpenAI
from datetime import datetime

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(row_width=1)
main_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
    InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy"),
    InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="skills")
)

# /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üòò –Ø –õ–µ—Ä–∞, —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –π —Ñ–ª—ñ—Ä—Ç—É.\n\n"
        "–û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ üí¨",
        reply_markup=main_keyboard
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "models":
        await bot.send_message(
            callback_query.from_user.id,
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶\n"
            "üíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\n"
            "üëâ https://t.me/virt_chat_ua1/134421"
        )
    elif data == "ask":
        await bot.send_message(
            callback_query.from_user.id,
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n"
            "–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )
    elif data == "creator":
        await bot.send_message(
            callback_query.from_user.id,
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
            "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
            "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂\n"
            "https://openai.com"
        )
    elif data == "skills":
        await bot.send_message(
            callback_query.from_user.id,
            "üß† –Ø –≤–º—ñ—é:\n"
            "‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n"
            "‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏\n"
            "‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ\n"
            "‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
        )

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
@dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
async def ai_reply(message: types.Message):
    try:
        completion = openai.chat.completions.create(
            messages=[{"role": "user", "content": message.text}],
            model="gpt-3.5-turbo",
        )
        response_text = completion.choices[0].message.content
        await message.reply(response_text)
    except Exception as e:
        await message.reply(f"ü•∫ OpenAI Error:\n{str(e)}")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
