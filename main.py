import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_auto_message_time = {}
GROUP_AUTO_MESSAGE_INTERVAL = timedelta(minutes=30)
TRIGGER_MESSAGE_COUNT = 5
message_counter = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
def private_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_lera"))
    kb.add(InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"))
    kb.add(InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"))
    kb.add(InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="recommend_models"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
def group_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="recommend_models"))
    kb.add(InlineKeyboardButton("‚ùì–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", url="https://t.me/LERA_V6_bot"))
    return kb

# Callback-–æ–±—Ä–æ–±–Ω–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'about_lera')
async def process_about_lera(callback_query: types.CallbackQuery):
    text = "–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏. –í–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –º–∞–≥—ñ—é —Å–ø–æ–∫—É—Å–∏ üòâ\n–õ—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ, –∞ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –º–æ–∂—É —Å—Ç–∞—Ç–∏ —Ç—ñ—î—é, —è–∫—É —Ç–∏ —à—É–∫–∞–≤..."
    await bot.send_message(callback_query.from_user.id, text, reply_markup=private_buttons())

@dp.callback_query_handler(lambda c: c.data == 'project_goal')
async def process_project_goal(callback_query: types.CallbackQuery):
    text = "–¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É."
    await bot.send_message(callback_query.from_user.id, text, reply_markup=private_buttons())

@dp.callback_query_handler(lambda c: c.data == 'about_creator')
async def process_about_creator(callback_query: types.CallbackQuery):
    text = "–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ"
    await bot.send_message(callback_query.from_user.id, text, reply_markup=private_buttons())

@dp.callback_query_handler(lambda c: c.data == 'recommend_models')
async def process_models(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–û—Å—å —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥, —è–∫–∏—Ö —è —Ä–∞–¥–∂—É: https://t.me/virt_chat_ua1/134421")

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥–∫—É —É –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type in ['group', 'supergroup'] and '@LERA_V6_bot' in message.text)
async def mention_response(message: types.Message):
    await message.reply("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=group_buttons())

# –ê–≤—Ç–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
async def auto_posting():
    while True:
        now = datetime.utcnow()
        for chat_id, last_time in last_auto_message_time.items():
            if now - last_time >= GROUP_AUTO_MESSAGE_INTERVAL:
                await bot.send_message(chat_id, "–Ø –ø–æ—Ä—É—á üòò –ü–∞–º‚Äô—è—Ç–∞–π, —â–æ –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ —á–µ–∫–∞—é—Ç—å –Ω–∞ —Ç–µ–±–µ —Ç—É—Ç: https://t.me/virt_chat_ua1/134421")
                last_auto_message_time[chat_id] = now
        await asyncio.sleep(60)

@dp.message_handler(lambda message: message.chat.type in ['group', 'supergroup'])
async def count_group_messages(message: types.Message):
    chat_id = message.chat.id
    message_counter[chat_id] = message_counter.get(chat_id, 0) + 1
    if message_counter[chat_id] >= TRIGGER_MESSAGE_COUNT:
        now = datetime.utcnow()
        last_time = last_auto_message_time.get(chat_id, datetime.min)
        if now - last_time >= GROUP_AUTO_MESSAGE_INTERVAL:
            await bot.send_message(chat_id, "–ù–∞–≥–∞–¥—É—é, —â–æ –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á üòâ https://t.me/virt_chat_ua1/134421")
            last_auto_message_time[chat_id] = now
            message_counter[chat_id] = 0

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –õ–µ—Ä–∞. –û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–æ:", reply_markup=private_buttons())

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_posting())
    executor.start_polling(dp, skip_updates=True)
