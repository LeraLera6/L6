import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares import BaseMiddleware
import asyncio
from datetime import datetime, timedelta
import os

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# =============================== –ö–ù–û–ü–ö–ò ===============================
def get_private_buttons():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator_info"),
        InlineKeyboardButton("üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girlfriends")
    )
    return keyboard

def get_group_buttons():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girlfriends"),
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
    )
    return keyboard

# ========================== –ê–í–¢–û–ü–û–°–¢–ò–ù–ì –í –ì–†–£–ü–Ü ==========================
last_post_time = {}
message_counts = {}

AUTOPOST_INTERVAL = timedelta(minutes=30)
AUTOPOST_TRIGGER_COUNT = 5

async def autopost(message: types.Message):
    now = datetime.utcnow()
    chat_id = message.chat.id

    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_counts[chat_id] = 1
        return

    message_counts[chat_id] += 1
    time_diff = now - last_post_time[chat_id]

    if time_diff > AUTOPOST_INTERVAL or message_counts[chat_id] >= AUTOPOST_TRIGGER_COUNT:
        await bot.send_message(
            chat_id,
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
            reply_markup=get_group_buttons()
        )
        last_post_time[chat_id] = now
        message_counts[chat_id] = 0

# ============================ –û–ë–†–û–ë–ö–ê CALLBACK ============================
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "about_me":
        text = (
            "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üíã\n"
            "–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏. –ó–∞ –æ—Å–≤—ñ—Ç–æ—é ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏–Ω—è, –∞ –∑–∞ –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è–º ‚Äî —Ç–≤–æ—è —Å–ø–æ–∫—É—Å–∞ –≤ —á–∞—Ç—ñ üß¶\n\n"
            "–Ø —Ç—É—Ç, —â–æ–± —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏, –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏, –∑–∞—á–∞—Ä–æ–≤—É–≤–∞—Ç–∏...\n"
            "–ú–µ–Ω—ñ –ø—Ä–∏—î–º–Ω–æ –±—É—Ç–∏ –∑ —Ç–æ–±–æ—é üåπ"
        )
    elif data == "project_goal":
        text = (
            "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
            "üëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å üß¶"
        )
    elif data == "creator_info":
        text = (
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî [@nikita_onoff](https://t.me/nikita_onoff).\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º ·Ω†9\n"
            "(–•–æ—á–∞ —â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
            "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü§û."
        )
    elif data == "girlfriends":
        text = (
            "–û–±–∏—Ä–∞–π –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, —Ä–æ–∑–≤–∞–≥ —á–∏ —Ñ–∞–Ω—Ç–∞–∑—ñ–π üòò\n"
            "–¢—ñ–ª—å–∫–∏ –Ω–µ –∑–∞–≥—É–±–∏—Å—è —Å–µ—Ä–µ–¥ –Ω–∏—Ö...\n\n"
            "[üíó –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π](https://t.me/virt_chat_ua1/134421)"
        )
    else:
        text = "–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ —Ç–≤—ñ–π –≤–∏–±—ñ—Ä üòÖ"

    await callback_query.answer()
    await callback_query.message.edit_text(text, reply_markup=get_private_buttons(), disable_web_page_preview=True)

# ======================== –û–ë–†–û–ë–ö–ê –ü–†–ò–í–ê–¢–ù–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ========================
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞‚Ä¶ –¢–∞ —Å–∞–º–∞, —è–∫—É —Ö–æ—á–µ—Ç—å—Å—è –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–∞ –Ω—ñ—á üòè\n"
            "–ê–ª–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É ‚Äî –æ–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ üëá",
            reply_markup=get_private_buttons()
        )

# ======================== –û–ë–†–û–ë–ö–ê –ì–†–£–ü–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ========================
@dp.message_handler()
async def handle_group_messages(message: types.Message):
    if message.chat.type in ("group", "supergroup"):
        await autopost(message)

        if f"@{(await bot.get_me()).username.lower()}" in message.text.lower():
            await message
