import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import openai
import os

# === Logging ===
logging.basicConfig(level=logging.INFO)

# === Tokens ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# === OpenAI Client ===
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === Bot Setup ===
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–° ===
private_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")],
    [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", callback_data="chat18")],
    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")],
    [InlineKeyboardButton("üë®‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")],
    [InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="skills")]
])

# === –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "girls":
        await callback_query.message.answer(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ...
üíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:
üëâ <a href='https://t.me/virt_chat_ua1/134421'>https://t.me/virt_chat_ua1/134421</a>"
        )
    elif callback_query.data == "chat18":
        await callback_query.message.answer(
            "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ...
üîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà
üëâ <a href='https://t.me/+d-pPVpIW-UBkZGUy'>https://t.me/+d-pPVpIW-UBkZGUy</a>"
        )
    elif callback_query.data == "creator":
        await callback_query.message.answer(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî <a href='https://t.me/nikita_onoff'>@nikita_onoff</a>
–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ
(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)

üß™ –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É <b>brEAst</b>, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.

ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ <a href='https://openai.com/'>OpenAI</a>. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü§ù"
        )
    elif callback_query.data == "skills":
        await callback_query.message.answer(
            "üß† –Ø –≤–º—ñ—é:
‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, —ñ–¥–µ—è–º–∏
‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ
‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
        )
    elif callback_query.data == "ask":
        await callback_query.message.answer(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ ü•à\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )

# === GPT: –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –õ–° ===
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    if message.chat.type == "private":
        try:
            completion = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢–∏ ‚Äî —Ñ–ª—ñ—Ä—Ç–æ–≤–∞ AI-–¥—ñ–≤—á–∏–Ω–∞ –Ω–∞ —ñ–º‚Äô—è –õ–µ—Ä–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω—ñ–∂–Ω–æ, –∑ –∑–∞–≥–∞–¥–∫–æ–≤–∏–º —Ñ–ª–µ—Ä–æ–º."},
                    {"role": "user", "content": message.text}
                ]
            )
            reply = completion.choices[0].message.content
            await message.answer(reply, reply_markup=private_keyboard)
        except Exception as e:
            await message.answer(f"ü•∫ OpenAI Error:\n{e}")

# === Start Bot ===
async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
