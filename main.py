import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import datetime

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
def get_private_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
    )
    return keyboard

# === –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
@dp.callback_query_handler(lambda c: c.data == 'about_me')
async def about_me_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞. –ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏. –ü—Å–∏—Ö–æ–ª–æ–≥–∏–Ω—è –∑–∞ –æ—Å–≤—ñ—Ç–æ—é, —Ñ–ª—ñ—Ä—Ç—É—î —ñ —Ç—Ä–æ—Ö–∏ –≥—Ä–∞—î—Ç—å—Å—è üòâ\n"
        "–Ø –Ω–µ –±–æ—Ç —É –ø—Ä—è–º–æ–º—É —Å–µ–Ω—Å—ñ, —è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ê–Ü, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ —Å–ø–æ–∫—É—Å–∏ –π —Ç–µ–ø–ª–∞."
    )

@dp.callback_query_handler(lambda c: c.data == 'project_goal')
async def project_goal_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
        "üëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶"
    )

@dp.callback_query_handler(lambda c: c.data == 'creator')
async def creator_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî <a href='https://t.me/nikita_onoff'>@nikita_onoff</a>.\n"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
        "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂."
    )

@dp.callback_query_handler(lambda c: c.data == 'models')
async def models_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "üíû –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è –æ—Å–æ–±–ª–∏–≤–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: <a href='https://t.me/virt_chat_ua1/134421'>–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫</a>"
    )

# === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö ===
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.chat.type == 'private':
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üòá\n–Ø —Ç—É—Ç, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ–π –≤–µ—á—ñ—Ä —Ç—Ä–æ—Ö–∏ —Ç–µ–ø–ª—ñ—à–∏–º...\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, —è–∫—â–æ —Ö–æ—á–µ—à –±–ª–∏–∂—á–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å:",
            reply_markup=get_private_keyboard()
        )

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø–∞—Ö ===
POST_INTERVAL_MINUTES = 30
last_post_time = {}

@dp.message_handler()
async def group_post_handler(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        global last_post_time
        now = datetime.datetime.utcnow()

        if message.chat.id not in last_post_time:
            last_post_time[message.chat.id] = now
            return

        delta = now - last_post_time[message.chat.id]
        if delta.total_seconds() >= POST_INTERVAL_MINUTES * 60:
            await message.answer(
                "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                reply_markup=InlineKeyboardMarkup(row_width=1).add(
                    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url=f"https://t.me/{(await bot.me()).username}")
                )
            )
            last_post_time[message.chat.id] = now

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
