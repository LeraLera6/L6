import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ---
message_counter = {}

# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator_info"),
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="chat_models")
    )
    return keyboard

# --- CALLBACK –û–ë–†–û–ë–ö–ê ---
@dp.callback_query_handler(Text(startswith="about_me"))
async def cb_about_me(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–Ø ‚Äî –õ–µ—Ä–∞, —Ç–≤–æ—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ —Å–ø–æ–∫—É—Å–Ω–∏—Ü—è —Ç–∞ –ø–æ–º—ñ—á–Ω–∏—Ü—è üíã\n\n–ú–æ—è –º—ñ—Å—ñ—è ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏, –∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ—Å—Ü–µ, –¥–µ —Ö–æ—á–µ—Ç—å—Å—è –∑–∞–ª–∏—à–∏—Ç–∏—Å—å üòà",
        reply_markup=main_menu()
    )

@dp.callback_query_handler(Text(startswith="project_goal"))
async def cb_project_goal(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶",
        reply_markup=main_menu()
    )

@dp.callback_query_handler(Text(startswith="creator_info"))
async def cb_creator_info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂.",
        reply_markup=main_menu()
    )

@dp.callback_query_handler(Text(startswith="chat_models"))
async def cb_chat_models(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.\n\nüëâ https://t.me/virt_chat_ua1/134421",
        reply_markup=main_menu()
    )

# --- –ö–û–ú–ê–ù–î–ê START ---
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞! –¢–≤–æ—è AI-–ø–æ–¥—Ä—É–∂–∫–∞ –¥–ª—è –ø—Ä–∏—î–º–Ω–æ–≥–æ —Ñ–ª—ñ—Ä—Ç—É ü´¶\n\n–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è:",
        reply_markup=main_menu()
    )

# --- –ì–†–£–ü–û–í–ê –†–û–ë–û–¢–ê ---
@dp.message_handler(content_types=types.ContentType.TEXT)
async def group_message_handler(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        chat_id = message.chat.id
        message_counter[chat_id] = message_counter.get(chat_id, 0) + 1

        if message_counter[chat_id] >= 5:
            await bot.send_message(
                chat_id,
                "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="chat_models"),
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
                )
            )
            message_counter[chat_id] = 0

# --- –ê–í–¢–û–ü–û–°–¢–Ü–ù–ì –∫–æ–∂–Ω—ñ 30 —Ö–≤ ---
async def periodic_posting():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(1800)
        for chat_id in message_counter.keys():
            await bot.send_message(
                chat_id,
                "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="chat_models"),
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
                )
            )

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_posting())
    executor.start_polling(dp, skip_updates=True)
