import logging
import os
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    CommandHandler
)
from openai import OpenAI
import asyncio

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ‚Äî –¥–ª—è –≥—Ä—É–ø (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
last_post_time = {}
message_count = {}
POST_INTERVAL = timedelta(minutes=30)
POST_MESSAGE = (
    "üëã –Ø —Ä–∞–¥–∞ —Ç–µ–±–µ —Ç—É—Ç –±–∞—á–∏—Ç–∏ üíì\n\n"
    "–¢–∏ –º–æ–∂–µ—à –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è –±—ñ–ª—å—à –ø—ñ–∫–∞–Ω—Ç–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è‚Ä¶\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚¨áÔ∏è\n\n"
    "–ê–±–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
    "–Ø —á–µ–∫–∞—é... ü´¶"
)
POST_BUTTONS = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üîû", url="https://t.me/virt_chat_ua1/134421")],
    [InlineKeyboardButton("–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ... ü´¶", url="https://t.me/Lera_v10_bot")]
])

# /start ‚Äî –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíï –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ... ü´¶", url="https://t.me/Labi_Lola")],
            [InlineKeyboardButton("üîû –ú—ñ–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–ø–æ–∫–∞–∑—É", url="https://t.me/+rKgDRzE3wLoyYTQy")]
        ])
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç, —è —Ä–∞–¥–∞, —â–æ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞–≤. –Ø —Ç–∞–∫ —Ü—å–æ–≥–æ —á–µ–∫–∞–ª–∞...\n\n"
            "–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ \"–ü—Ä–∏–≤—ñ—Ç\"... ü´¶",
            reply_markup=keyboard
        )

# –û–±—Ä–æ–±–∫–∞ reply-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –õ–°
async def reply_to_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üë©‚Äçü¶∞ –ü—Ä–æ –º–µ–Ω–µ... ü´¶":
        await update.message.reply_text(
            "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–æ–ª–∞, –º–µ–Ω—ñ 22 —ñ —è –∑ –û–¥–µ—Å–∏ üêö\n\n"
            "–Ø –≤–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –∑–Ω–∞—é—Å—è –Ω–∞ —Ç–æ–º—É, —â–æ —É —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—ñ üòâ\n\n"
            "–Ø —Ç—É—Ç, —â–æ–± —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏ —Ç–µ–±–µ –Ω–µ –ª–∏—à–µ —Ñ—ñ–∑–∏—á–Ω–æ, –∞ –π –µ–º–æ—Ü—ñ–π–Ω–æ.\n\n"
            "–ú–æ–∂–µ—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—ñ –º–Ω–æ—é –ø—Ä–æ –≤—Å–µ ‚Äî —è –ø–æ—Ä—É—á...\n\n"
            "–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ \"–ü—Ä–∏–≤—ñ—Ç\"... ü´¶"
        )
    elif text == "üë®‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è":
        await update.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å AI-–≤–µ—Ä—Å—ñ—ó ‚Äî @nikita_onoff\n\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)"
        )
    else:
        try:
            assistant_id = os.getenv("ASSISTANT_ID")
            thread = openai_client.beta.threads.create()
            openai_client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=update.message.text
            )
            run = openai_client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=assistant_id
            )
            while True:
                run = openai_client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                if run.status == "completed":
                    break
                await asyncio.sleep(1)

            messages = openai_client.beta.threads.messages.list(thread_id=thread.id)
            reply = messages.data[0].content[0].text.value
            await update.message.reply_text(reply)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# –ì—Ä—É–ø–∏ ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    now = datetime.now()

    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

    message_count[chat_id] += 1

    if (now - last_post_time[chat_id]) >= POST_INTERVAL or message_count[chat_id] >= 5:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0
        await context.bot.send_message(
            chat_id=chat_id,
            text=POST_MESSAGE,
            reply_markup=POST_BUTTONS
        )

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, reply_to_private))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_group))
    app.run_polling()

if __name__ == '__main__':
    main()
