# main.py
import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ===
autopost_interval = timedelta(minutes=30)
last_autopost_time = datetime.now() - autopost_interval
last_user_messages = {}  # –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º—ñ–∂ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞–º–∏

group_chat_id_log = -1002138585220  # —á–∞—Ç –ª–æ–≥—ñ–≤
list_link = "https://t.me/virt_chat_ua1/134421"
main_group_id = -1002094307413

# === –ö–Ω–æ–ø–∫–∏ –õ–° ===
def get_private_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üë•‚Äçüë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="goal"),
        InlineKeyboardButton("üë©‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
        InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
    )
    return kb

# === –ö–Ω–æ–ø–∫–∏ —á–∞—Ç—É ===
def get_group_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models_group"),
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot")
    )
    return kb

# === –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç—É ===
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    if message.chat.type == "private":
        text = "–ü—Ä–∏–≤—ñ—Ç ‚Äî —è –õ–µ—Ä–∞. –†–∞–¥–∞ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ üòä\n\n–ù–∞—Ç–∏—Å–Ω–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –º–µ–Ω–µ üëá"
        await message.answer(text, reply_markup=get_private_keyboard())

# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query_handler()
async def callback_handler(query: types.CallbackQuery):
    if query.data == "about":
        await query.message.edit_text("–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ç—Ä–æ—Ö–∏ —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ üòâ —ñ –±—É—Ç–∏ —Ç–≤–æ—î—é –æ—Å–æ–±–ª–∏–≤–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é.\n–ú–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å... —è —Ç—É—Ç ü§™")
    elif query.data == "goal":
        await query.message.edit_text("üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü¶¶")
    elif query.data == "creator":
        await query.message.edit_text("üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff. \n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó <a href='https://openai.com'>OpenAI</a>. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂.")
    elif query.data == "models" or query.data == "models_group":
        await query.message.answer(f"üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n–Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—ñ–π –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üòâ\n–û—Å—å –≤–æ–Ω–∏: {list_link}", reply_markup=(get_private_keyboard() if query.data == "models" else None))
        await query.answer()

# === –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥–∫—É –≤ –≥—Ä—É–ø—ñ ===
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"] and ("@LERA_V6_bot" in message.text or message.reply_to_message and message.reply_to_message.from_user.username == "LERA_V6_bot"))
async def mention_response(message: types.Message):
    await message.reply(
        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥. –ß–∏ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
        reply_markup=get_group_keyboard()
    )

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø—ñ ===
async def auto_post():
    global last_autopost_time
    while True:
        now = datetime.now()
        if now - last_autopost_time > autopost_interval:
            try:
                await bot.send_message(
                    main_group_id,
                    "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥. –ß–∏ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
                    reply_markup=get_group_keyboard()
                )
                last_autopost_time = now
            except Exception as e:
                logging.error(f"AutoPost Error: {e}")
        await asyncio.sleep(60)

# === –ó–≤—ñ—Ç —É –ª–æ–≥-–∫–∞–Ω–∞–ª ===
async def daily_report():
    while True:
        now = datetime.now()
        target = now.replace(hour=22, minute=30, second=0, microsecond=0)
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - datetime.now()).seconds)
        try:
            await bot.send_message(group_chat_id_log, "–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç: –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î üíñ")
        except Exception as e:
            logging.error(f"Daily Report Error: {e}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_post())
    loop.create_task(daily_report())
    executor.start_polling(dp, skip_updates=True)
