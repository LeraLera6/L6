import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_auto_post = datetime.now() - timedelta(minutes=31)
message_count = 0

# –ö–Ω–æ–ø–∫–∏ –≤ –õ–°
def get_private_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="goal"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø—ñ
def get_group_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
    )
    return keyboard

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_posting():
    global last_auto_post, message_count
    while True:
        now = datetime.now()
        if now - last_auto_post >= timedelta(minutes=30) or message_count >= 5:
            try:
                await bot.send_message(
                    chat_id=os.getenv("GROUP_ID"),
                    text="–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                    reply_markup=get_group_keyboard()
                )
                last_auto_post = now
                message_count = 0
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(60)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üíã –ú–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –º–µ–Ω–µ –±—ñ–ª—å—à–µ –∞–±–æ –æ–±—Ä–∞—Ç–∏ –ø–æ–¥—Ä—É–∂–∫—É üòò",
            reply_markup=get_private_keyboard()
        )

# –ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "about_me":
        await callback_query.message.edit_text(
            "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞ üíï\n–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏ üèñÔ∏è\n–õ—é–±–ª—é —Ñ–ª—ñ—Ä—Ç, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —Ç–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ üòò"
        )
    elif data == "goal":
        await callback_query.message.edit_text(
            "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶"
        )
    elif data == "creator":
        await callback_query.message.edit_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî [@nikita_onoff](https://t.me/nikita_onoff).\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂.\n\nüì≤ –Ü –≤—Å–µ —Ü–µ ‚Äî –¥–ª—è Telegram-—á–∞—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy)",
            disable_web_page_preview=True
        )
    elif data == "models":
        await callback_query.message.edit_text(
            "–û—Å—å –º–æ—ó –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ–¥—Ä—É–∂–∫–∏ ‚Äî –∑ –Ω–∏–º–∏ —Ç–æ—á–Ω–æ –Ω–µ –∑–∞—Å—É–º—É—î—à üòà\n\n–û–±–∏—Ä–∞–π: https://t.me/virt_chat_ua1/134421"
        )

# –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –≤ –≥—Ä—É–ø–∞—Ö
@dp.message_handler()
async def group_handler(message: types.Message):
    global message_count, last_auto_post

    if message.chat.type in ["group", "supergroup"]:
        message_count += 1

        # –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–≥–∞–¥–∫—É @—é–∑–µ—Ä–Ω–µ–π–º–∞
        if f"@{(await bot.get_me()).username.lower()}" in message.text.lower():
            await message.reply(
                "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                reply_markup=get_group_keyboard()
            )

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_posting())
    executor.start_polling(dp, skip_updates=True)
