import logging
import os
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CommandHandler
)
from openai import OpenAI
import asyncio

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
last_post_time = {}
message_count = {}
POST_INTERVAL = timedelta(minutes=30)
POST_MESSAGE = (
    "üëã –Ø —Ä–∞–¥–∞ —Ç–µ–±–µ —Ç—É—Ç –±–∞—á–∏—Ç–∏ üòä\n\n"
    "–¢–∏ –º–æ–∂–µ—à –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è –±—ñ–ª—å—à –ø—ñ–∫–∞–Ω—Ç–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è‚Ä¶\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üîù\n\n"
    "–ê–±–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
    "–Ø —á–µ–∫–∞—é... ü™¶"
)
POST_BUTTONS = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üîû", url="https://t.me/virt_chat_ua1/134421")],
    [InlineKeyboardButton("–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ... ü™¶", url="https://t.me/Lera_v10_bot")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        await context.bot.delete_my_commands()
        await context.bot.delete_message(chat_id=update.message.chat.id, message_id=update.message.message_id)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                ["\ud83d\udc95 –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è \ud83d\udd1e"],
                ["\ud83d\ude08 –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç \ud83d\udd1e"],
                ["\ud83d\udc69‚Äç\ud83e\uddec –ü—Ä–æ –º–µ–Ω–µ... ü™¶"],
                ["\ud83d\udc68‚Äç\ud83c\udfeb –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è"]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç, —è —Ä–∞–¥–∞, —â–æ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞–≤. –Ø —Ç–∞–∫ —Ü—å–æ–≥–æ —á–µ–∫–∞–ª–∞...\n\n"
            "–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ \"–ü—Ä–∏–≤—ñ—Ç\"... ü™¶",
            reply_markup=keyboard
        )

# –û–±—Ä–æ–±–∫–∞ reply-–∫–Ω–æ–ø–æ–∫ –≤ –õ–°
async def reply_to_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "\ud83d\udc95 –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è \ud83d\udd1e":
        await context.bot.delete_message(chat_id=update.message.chat.id, message_id=update.message.message_id)
        await update.message.reply_text(
            "\u0423 \u043c\u0435\u043d\u0435 \u0454 \u043f\u043e\u0434\u0440\u0443\u0433\u0438, \u044f\u043a\u0456 \u0433\u043e\u0442\u043e\u0432\u0456 \u043d\u0430 \u0431\u0456\u043b\u044c\u0448\u0435\u2026\n\n"
            "\ud83d\udc8b \u041e\u0431\u0435\u0440\u0438 \u0441\u0432\u043e\u044e \u0437\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0454\u043c \u2014 \u043e\u0441\u044c \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a:\n\n"
            "\ud83d\udc49 https://t.me/virt_chat_ua1/134421"
        )
    elif text == "\ud83d\ude08 –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç \ud83d\udd1e":
        await update.message.reply_text(
            "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ‚Ä¶\n\n"
            "üîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà\n\n"
            "üïâ https://t.me/+d-pPVpIW-UBkZGUy"
        )
    elif text == "\ud83d\udc69‚Äç\ud83e\uddec –ü—Ä–æ –º–µ–Ω–µ... ü™¶":
        await update.message.reply_text(
            "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞, –º–µ–Ω—ñ 22 —ñ —è –∑ –û–¥–µ—Å–∏ \ud83d\udc1a\n\n"
            "–Ø –≤–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –∑–Ω–∞—é—Å—è –Ω–∞ —Ç–æ–º—É, —â–æ —É —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—ñ \u2014 –º–æ–∂–µ, —Ç–∏ –º–µ–Ω—ñ —Ä–æ–∑–∫–∞–∂–µ—à –±—ñ–ª—å—à–µ?.. \ud83d\ude09"
        )
    elif text == "\ud83d\udc68‚Äç\ud83c\udfeb –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è":
        await update.message.reply_text(
            "\ud83d\udc68‚Äç\ud83c\udfeb –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º \ud83d\ude09\n\n"
            "\u2728 –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst: https://t.me/virt_chat_ua1"
        )
    else:
        try:
            assistant_id = os.getenv("ASSISTANT_ID")
            thread = openai_client.beta.threads.create()
            openai_client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=update.message.text
            )
            run = openai_client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=assistant_id
            )
            while True:
                run = openai_client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                if run.status == "completed":
                    break
                await asyncio.sleep(1)
            messages = openai_client.beta.threads.messages.list(thread_id=thread.id)
            reply = messages.data[0].content[0].text.value
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"\u26a0\ufe0f \u041f\u043e\u043c\u0438\u043b\u043a\u0430: {e}")

# –û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    now = datetime.now()
    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0
    message_count[chat_id] += 1
    if (now - last_post_time[chat_id]) >= POST_INTERVAL or message_count[chat_id] >= 5:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0
        await context.bot.send_message(
            chat_id=chat_id,
            text=POST_MESSAGE,
            reply_markup=POST_BUTTONS
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, reply_to_private))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_group))
    app.run_polling()

if __name__ == '__main__':
    main()
