import logging
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, filters,
    CallbackQueryHandler, CommandHandler
)
from openai import AsyncOpenAI

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
last_post_time = {}
message_count = {}
POST_INTERVAL = timedelta(minutes=30)
POST_MESSAGE = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."
POST_BUTTONS = InlineKeyboardMarkup([
    [
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
    ]
])

# –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ —É –õ–°
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "ask":
        await query.message.reply_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n"
            "–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )
    elif query.data == "girls":
        await query.message.reply_text(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶ üíã\nüëâ https://t.me/virt_chat_ua1/134421"
        )
    elif query.data == "creator":
        await query.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
            "üí° –¶–µ –≤—Å–µ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy), —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n"
            "ü§ñ –Ø –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ [OpenAI](https://openai.com/) ü´∂",
            parse_mode="Markdown"
        )

# –ö–æ–º–∞–Ω–¥–∞ /start —É –õ–°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç üòò –Ø –õ–µ—Ä–∞. –ü–∏—à–∏ –º–µ–Ω—ñ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ –∞–±–æ –æ–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")],
                [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy")],
                [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")],
                [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")]
            ])
        )

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –õ–° —á–µ—Ä–µ–∑ GPT
async def reply_to_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": update.message.text}]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø–∞—Ö
async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    now = datetime.now()

    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

    message_count[chat_id] += 1

    if (now - last_post_time[chat_id]) >= POST_INTERVAL or message_count[chat_id] >= 5:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

        await context.bot.send_message(
            chat_id=chat_id,
            text=POST_MESSAGE,
            reply_markup=POST_BUTTONS
        )

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, reply_to_private))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_group))

    app.run_polling()

if __name__ == '__main__':
    main()
