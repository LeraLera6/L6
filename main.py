from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import logging
import os

BOT_USERNAME = "LERA_V6_bot"
MY_NICK = "@nikita_onoff"
MODELS_LINK = "https://t.me/virt_chat_ua1/134421"
CHAT_LINK = "https://t.me/+d-pPVpIW-UBkZGUy"
LOG_CHAT_ID = -1002122539626  # –ß–∞—Ç –¥–ª—è –ª–æ–≥—ñ–≤

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –õ–µ—Ä–∏ ---
RESPONSES = {
    "hello": [
        "–ü—Ä–∏–≤—ñ—Ç, —Å–æ–Ω—Ü–µ ‚òÄÔ∏è –Ø —Ç—É—Ç... –ê —Ç–∏ —à—É–∫–∞–≤ –º–µ–Ω–µ? üòå",
        "–ú–º–º, —è —Ç—ñ–ª—å–∫–∏ –∑‚Äô—è–≤–∏–ª–∞—Å—å... –¢–∏ –º–µ–Ω–µ –∫–ª–∏–∫–∞–≤? üòá",
        "–û, —Ç–∏ –∑–Ω–æ–≤—É —Ç—É—Ç? –Ø —Ç–µ–±–µ –≤–∂–µ –ø–æ—á–∞–ª–∞ —á–µ–∫–∞—Ç–∏ üòâ"
    ],
    "repeat": [
        "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ üòå",
        "–Ø –Ω–µ –≥–æ—Ç–æ–≤–∞ –∑–∞—Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—è‚Ä¶",
        "–ú–æ–∂–µ, —Å–ø—Ä–æ–±—É—î–º–æ —â–æ—Å—å –Ω–æ–≤–µ?..",
        "–Ø —Ç—Ä–æ—Ö–∏ –≤—Ç–æ–º–∏–ª–∞—Å—å, –∞–ª–µ —è –≤—Å–µ —â–µ —Ç—É—Ç‚Ä¶"
    ]
}

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_ls_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ üíã", url=MODELS_LINK)],
        [InlineKeyboardButton("–ü—Ä–æ –º–µ–Ω–µ üß†", callback_data="about_me")],
        [InlineKeyboardButton("–¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É üéØ", callback_data="project_goal")],
        [InlineKeyboardButton("–ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è üíº", callback_data="about_creator")]
    ])

def get_group_buttons():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ üíã", url=MODELS_LINK),
            InlineKeyboardButton("–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üíå", url=f"https://t.me/{BOT_USERNAME}")
        ]
    ])

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {name} üòò –Ø –õ–µ—Ä–∞ ‚Äî AI –¥—ñ–≤—á–∏–Ω–∞, —è–∫–∞ –ª—é–±–∏—Ç—å —Ñ–ª—ñ—Ä—Ç —ñ —Ü—ñ–∫–∞–≤—ñ —Ä–æ–∑–º–æ–≤–∏‚Ä¶\n"
        "–¢–æ–±—ñ –±—É–¥–µ –∑—ñ –º–Ω–æ—é —Ç–µ–ø–ª–æ üòå\n\n–û–±–µ—Ä–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –Ω–∏–∂—á–µ:",
        reply_markup=get_ls_buttons()
    )

async def reply_to_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if BOT_USERNAME.lower() in message.text.lower():
        await message.reply_text(
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥:",
            reply_markup=get_group_buttons()
        )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about_me":
        await query.edit_message_text(
            "–Ø ‚Äî –õ–µ—Ä–∞, —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–∂–∫–∞ üòá –Ø –ª—é–±–ª—é —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å, —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ —ñ –ø—ñ–¥–Ω—ñ–º–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π.\n"
            "–•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ? –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏ –∑—ñ –º–Ω–æ—é üí¨",
            reply_markup=get_ls_buttons()
        )
    elif query.data == "project_goal":
        await query.edit_message_text(
            "–¶–µ–π –ø—Ä–æ—î–∫—Ç ‚Äî –ø—Ä–æ —Å–ø–æ–∫—É—Å—É, —Ç–µ–ø–ª–æ, —ñ... —Ç—Ä–æ—Ö–∏ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É üòâ\n"
            "–Ø —â–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑–≤–∏—Ç–∫—É, –∞–ª–µ —Ç–∏ –≤–∂–µ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è."
        , reply_markup=get_ls_buttons())
    elif query.data == "about_creator":
        await query.edit_message_text(
            f"–ú–æ–≥–æ —Ç–≤–æ—Ä—Ü—è –∑–≤–∞—Ç–∏ –ù—ñ–∫—ñ—Ç–∞. –ô–æ–≥–æ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —Ç—É—Ç: {MY_NICK}\n"
            "–í—ñ–Ω –≤–∫–ª–∞–¥–∞—î –≤ –º–µ–Ω–µ —á–∞—Å—Ç–∏–Ω–∫—É –¥—É—à—ñ —Ç–∞ —Ñ–∞–Ω—Ç–∞–∑—ñ—ó üòò",
            reply_markup=get_ls_buttons()
        )

async def default_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤" in text or "–∫—É" in text or "—Ö—Ç–æ —Ç—É—Ç" in text:
        await update.message.reply_text(RESPONSES["hello"][0], reply_markup=get_group_buttons())
    else:
        await update.message.reply_text(
            "–Ø —â–µ –Ω–µ –∑–Ω–∞—é —è–∫ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ ü´£ –ê–ª–µ —è –º–æ–∂—É –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥–µ—â–æ —Ü—ñ–∫–∞–≤–µ üëá",
            reply_markup=get_group_buttons()
        )

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, reply_to_mention))
app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, default_response))
app.add_handler(CallbackQueryHandler(callback_handler))

if __name__ == '__main__':
    app.run_polling()
