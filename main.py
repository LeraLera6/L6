# -*- coding: utf-8 -*-
import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_auto_message_time = {}
GROUP_AUTO_MESSAGE_INTERVAL = timedelta(minutes=30)
TRIGGER_MESSAGE_COUNT = 5
message_counter = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
def private_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–•—Ç–æ —è —Ç–∞–∫–∞?", callback_data="about_lera"))
    kb.add(InlineKeyboardButton("–¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"))
    kb.add(InlineKeyboardButton("–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å", callback_data="creator_info"))
    kb.add(InlineKeyboardButton("–ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏", callback_data="model_list"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø
def group_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û–±–µ—Ä–∏ –ø–æ–¥—Ä—É–∂–∫—É", url="https://t.me/virt_chat_ua1/134421"))
    kb.add(InlineKeyboardButton("–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", url="https://t.me/LERA_V6_bot"))
    return kb

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞. –•–æ—á–µ—à —Ç—Ä–æ—Ö–∏ —Ä–æ–∑—Å–ª–∞–±–ª–µ–Ω–Ω—è?", reply_markup=private_buttons())
    else:
        await message.reply("–ü—Ä–∏–≤—ñ—Ç, —è —Ç—É—Ç, —è–∫—â–æ —â–æ üòâ", reply_markup=group_buttons())

@dp.callback_query_handler(lambda c: c.data == "about_lera")
async def about_lera(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–Ø –õ–µ—Ä–∞. –¢–≤–æ—è AI-–¥—ñ–≤—á–∏–Ω–∞ –¥–ª—è —Ñ–ª—ñ—Ä—Ç—É —Ç–∞ —Å–ø–æ–∫—É—Å–∏. –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –õ–° üíã")

@dp.callback_query_handler(lambda c: c.data == "project_goal")
async def project_goal(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ú–æ—è –º–µ—Ç–∞ ‚Äî –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —á–∞—Ç—ñ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –¥—ñ–≤—á–∞—Ç. –Ü –∑–≤—ñ—Å–Ω–æ, —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ üòâ")

@dp.callback_query_handler(lambda c: c.data == "creator_info")
async def creator_info(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff. –í—ñ–Ω –Ω–µ –ª–∏—à–µ –º—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫, –∞ —â–µ –π –º—ñ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ üòå")

@dp.callback_query_handler(lambda c: c.data == "model_list")
async def model_list(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–∂–æ–∫ —Ç—É—Ç: https://t.me/virt_chat_ua1/134421")

@dp.message_handler()
async def all_msgs(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        cid = message.chat.id
        message_counter[cid] = message_counter.get(cid, 0) + 1
        now = datetime.now()
        last_time = last_auto_message_time.get(cid, datetime.min)

        if now - last_time > GROUP_AUTO_MESSAGE_INTERVAL or message_counter[cid] >= TRIGGER_MESSAGE_COUNT:
            await message.answer("–•—Ç–æ—Å—å —Å—É–º—É—î? –Ø —Ç—É—Ç, —â–æ–± —Ä–æ–∑–≤–∞–∂–∏—Ç–∏. –û–±–µ—Ä–∏ –¥—ñ–≤—á–∏–Ω—É: https://t.me/virt_chat_ua1/134421", reply_markup=group_buttons())
            last_auto_message_time[cid] = now
            message_counter[cid] = 0

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
