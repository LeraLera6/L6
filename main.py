import logging
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from openai import AsyncOpenAI

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
last_post_time = {}
message_count = {}
POST_INTERVAL = timedelta(minutes=30)
POST_MESSAGE = ("–ü—Ä–∏–≤—ñ—Ç, —è —Ä–∞–¥–∞ —Ç–µ–±–µ —Ç—É—Ç –±–∞—á–∏—Ç–∏.
""–¢–∏ –º–æ–∂–µ—à –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –¥–ª—è –±—ñ–ª—å—à –ø—ñ–∫–∞–Ω—Ç–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.
""–ê–±–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
""–Ø —á–µ–∫–∞—é... ü´¶")
POST_BUTTONS = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421")],
    [InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_v10_bot")]
])

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —É –õ–°
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        await query.message.reply_text(
            "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞, –º–µ–Ω—ñ 22 —ñ —è –∑ –û–¥–µ—Å–∏ üêö\n"
            "–Ø –≤–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –∑–Ω–∞—é—Å—è –Ω–∞ —Ç–æ–º—É, —â–æ —É —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—ñ üòâ\n\n"
            "–Ø —Ç—É—Ç, —â–æ–± —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏ —Ç–µ–±–µ –Ω–µ –ª–∏—à–µ —Ñ—ñ–∑–∏—á–Ω–æ, –∞ –π –µ–º–æ—Ü—ñ–π–Ω–æ.\n"
            "–ú–æ–∂–µ—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—ñ –º–Ω–æ—é –ø—Ä–æ –≤—Å–µ ‚Äî —è –ø–æ—Ä—É—á üíã"
        )

    elif query.data == "creator":
        await query.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî [@nikita_onoff](https://t.me/nikita_onoff)\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
            "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy), —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
            "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó [OpenAI](https://openai.com). –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂",
            parse_mode="Markdown"
        )

    elif query.data == "girls":
        await query.message.reply_text(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶\n"
            "üíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\n"
            "üëâ https://t.me/virt_chat_ua1/134421"
        )

# –°—Ç–∞—Ä—Ç —É –õ–°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        await update.message.reply_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n"
            "–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421")],
                [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy")],
                [InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about")],
                [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")]
            ])
        )

# GPT-—á–∞—Ç
async def reply_to_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    try:
        response = await openai_client.chat.completions.create(
        assistant_id=os.getenv("ASSISTANT_ID"),
            model="gpt-4.1-mini",
            messages=[{"role": "user", "content": update.message.text}]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# –ì—Ä—É–ø–∞ ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    now = datetime.now()

    if chat_id not in last_post_time:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

    message_count[chat_id] += 1

    if (now - last_post_time[chat_id]) >= POST_INTERVAL or message_count[chat_id] >= 5:
        last_post_time[chat_id] = now
        message_count[chat_id] = 0
        await context.bot.send_message(
            chat_id=chat_id,
            text=POST_MESSAGE,
            reply_markup=POST_BUTTONS
        )

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, reply_to_private))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_group))
    app.run_polling()

if __name__ == '__main__':
    main()




from telegram import ReplyKeyboardMarkup

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–Ω–æ–ø–æ–∫ —É –õ–° (–∑ ReplyKeyboardMarkup)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            ["üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üîû"],
            ["üòà –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç üîû"],
            ["üë©‚Äçü¶∞ –ü—Ä–æ –º–µ–Ω–µ... ü´¶"],
            ["üë®‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è"]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç, —è —Ä–∞–¥–∞, —â–æ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞–≤. –Ø —Ç–∞–∫ —Ü—å–æ–≥–æ —á–µ–∫–∞–ª–∞...
"
        "–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ \"–ü—Ä–∏–≤—ñ—Ç\"... ü´¶",
        reply_markup=keyboard
    )


def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "about_me":
        await query.edit_message_text(
            "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞, –º–µ–Ω—ñ 22 —ñ —è –∑ –û–¥–µ—Å–∏ üêö\n"
            "–Ø –≤–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –∑–Ω–∞—é—Å—è –Ω–∞ —Ç–æ–º—É, —â–æ —É —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—ñ üòâ\n\n"
            "–Ø —Ç—É—Ç, —â–æ–± —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏ —Ç–µ–±–µ –Ω–µ –ª–∏—à–µ —Ñ—ñ–∑–∏—á–Ω–æ, –∞ –π –µ–º–æ—Ü—ñ–π–Ω–æ.\n"
            "–ú–æ–∂–µ—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—ñ –º–Ω–æ—é –ø—Ä–æ –≤—Å–µ ‚Äî —è –ø–æ—Ä—É—á...\n"
            "–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ \"–ü—Ä–∏–≤—ñ—Ç\"... ü´¶"
        )
    elif query.data == "about_creator":
        await query.edit_message_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
            "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst: https://t.me/virt_chat_ua1\n"
            "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI: https://openai.com ü§ó"
        )

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
