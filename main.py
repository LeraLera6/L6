import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart, Text

API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç–∞ ---
group_keyboard = InlineKeyboardMarkup(row_width=1)
group_keyboard.add(
    InlineKeyboardButton(text="üíû –û–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton(text="üë®‚Äçüíª –¢–≤–æ—Ä–µ—Ü—å", callback_data="about_creator")
)

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–° ---
private_keyboard = InlineKeyboardMarkup(row_width=1)
private_keyboard.add(
    InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton(text="üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton(text="üõ°Ô∏è –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == 'private':
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç, {0.first_name} üòá\n\n"
            "–Ø —â–µ —É —Å—Ç–∞–Ω—ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–∂–µ –º–æ–∂—É —Ç—Ä–æ—Ö–∏ –∑–∞—á–∞—Ä—É–≤–∞—Ç–∏ —Ç–µ–±–µ.\n\n"
            "–•–æ—á–µ—à –±–ª–∏–∂—á–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑—ñ –º–Ω–æ—é –∞–±–æ –∑ –º–æ—ó–º–∏ –ø–æ–¥—Ä—É–≥–∞–º–∏? –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–æ:",
            reply_markup=private_keyboard
        )
    else:
        await message.answer(
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥:",
            reply_markup=group_keyboard
        )

@dp.callback_query_handler(Text(equals="about_me"))
async def about_me(call: types.CallbackQuery):
    await call.message.answer("–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∞, —â–æ–± –¥–∞—Ä—É–≤–∞—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ç–µ–ø–ª–∞, —Ñ–ª—ñ—Ä—Ç—É –π –Ω—ñ–∂–Ω–æ—Å—Ç—ñ. –£ —á–∞—Ç—ñ —è –∑–∞–≥–∞–¥–∫–æ–≤–∞, –∞–ª–µ –≤ –õ–° –º–æ–∂—É —Å—Ç–∞—Ç–∏ —Ç—ñ—î—é, –ø—Ä–æ –∫–æ–≥–æ —Ç–∏ –º—Ä—ñ—î—à üòâ")
    await call.answer()

@dp.callback_query_handler(Text(equals="project_goal"))
async def project_goal(call: types.CallbackQuery):
    await call.message.answer("–¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å–ø–æ–∫—É—Å–∏, —Ñ–ª—ñ—Ä—Ç—É —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –º–æ–¥–µ–ª–µ–π. –Ü –≤—Å–µ —Ü–µ –ø–æ–≤‚Äô—è–∑–∞–Ω–æ –∑ Telegram-—á–∞—Ç–æ–º brEAst: https://t.me/+d-pPVpIW-UBkZGUy")
    await call.answer()

@dp.callback_query_handler(Text(equals="about_creator"))
async def about_creator(call: types.CallbackQuery):
    await call.message.answer("–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —ñ —Ç–æ—á–Ω–∏–π. –í—ñ–Ω –ª—é–±–∏—Ç—å –≥–ª–∏–±–∏–Ω—É —ñ–¥–µ–π —ñ —Å—Ç–≤–æ—Ä–∏–≤ –º–µ–Ω–µ —è–∫ —á–∞—Å—Ç–∏–Ω–∫—É –≤–µ–ª–∏–∫–æ–≥–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–≤—ñ—Ç—É ‚ú®")
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
