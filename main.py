from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime, timedelta
import asyncio
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# --- –ö–Ω–æ–ø–∫–∏ ---
menu_kb = InlineKeyboardMarkup(row_width=1)
menu_kb.add(
    InlineKeyboardButton("üíã–ü—Ä–æ –º–µ–Ω–µ", callback_data="about"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="goal"),
    InlineKeyboardButton("üë©‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
)

# --- –ì—Ä—É–ø–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ---
group_kb = InlineKeyboardMarkup(row_width=1)
group_kb.add(
    InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models_chat"),
    InlineKeyboardButton("‚ùì–ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot?start=from_group")
)

# --- –°—Ç–∞–Ω–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É ---
last_group_post = None

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç üòò\n–Ø ‚Äî –õ–µ—Ä–∞. –†–∞–¥–∞ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ —Ç—É—Ç.\n–ù–∞—Ç–∏—Å–Ω–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –ø—Ä–æ –º–µ–Ω–µ üòõ",
            reply_markup=menu_kb)

@dp.callback_query_handler(lambda c: c.data == "about")
async def about_me(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏.\n–í–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –º–∞–≥—ñ—é —Å–ø–æ–∫—É—Å–∏ ü•µ\n–õ—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ...",
        reply_markup=menu_kb)

@dp.callback_query_handler(lambda c: c.data == "goal")
async def project_goal(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å üòõ\n\nüí¨ –Ü –ø–∞–º‚Äô—è—Ç–∞–π ‚Äî —É—Å–µ —Ü–µ —î —á–∞—Å—Ç–∏–Ω–æ—é –ø—Ä–æ—î–∫—Ç—É <a href='https://t.me/+d-pPVpIW-UBkZGUy'>brEAst</a> ‚Äî –Ω–∞—à–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ Telegram-—á–∞—Ç—É —Å–ø–æ–∫—É—Å–∏ —Ç–∞ —Ñ–∞–Ω—Ç–∞–∑—ñ–π.",
        reply_markup=menu_kb)

@dp.callback_query_handler(lambda c: c.data == "creator")
async def about_creator(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üë©‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ <a href='https://openai.com'>OpenAI</a>. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü§ù",
        reply_markup=menu_kb)

@dp.callback_query_handler(lambda c: c.data == "models")
async def models(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n–Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—ñ–π –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üòä\n–û—Å—å –≤–æ–Ω–∏: https://t.me/virt_chat_ua1/134421",
        reply_markup=menu_kb)

@dp.callback_query_handler(lambda c: c.data == "models_chat")
async def models_group(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.reply(
        "üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n–Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—ñ–π –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üòä\n–û—Å—å –≤–æ–Ω–∏: https://t.me/virt_chat_ua1/134421")

# --- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø—ñ ---
async def group_autopost():
    global last_group_post
    while True:
        try:
            if datetime.utcnow().minute % 30 == 0:
                now = datetime.utcnow()
                if not last_group_post or (now - last_group_post) >= timedelta(minutes=30):
                    await bot.send_message(GROUP_CHAT_ID,
                        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥. –ß–∏ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", 
                        reply_markup=group_kb)
                    last_group_post = now
            await asyncio.sleep(60)
        except Exception as e:
            logging.exception(e)
            await asyncio.sleep(60)

# --- –°—Ç–∞—Ä—Ç–µ—Ä ---
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(group_autopost())
    executor.start_polling(dp, skip_updates=True)
