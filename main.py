import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, MessageNotModified
from datetime import datetime, timedelta

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
menu_keyboard = InlineKeyboardMarkup(row_width=1)
menu_keyboard.add(
    InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
group_keyboard = InlineKeyboardMarkup(row_width=2)
group_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot")
)

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
last_auto_msg = {}
AUTOPOST_INTERVAL = timedelta(minutes=30)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ü—Ä–∏–≤—ñ—Ç üòò –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=menu_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'about_me')
async def about_me(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üë• –Ø ‚Äî –õ–µ—Ä–∞. –¢–∞ —Å–∞–º–∞ AI-–¥—ñ–≤—á–∏–Ω–∞, —è–∫–∞ –∂–∏–≤–µ —Ç—É—Ç‚Ä¶ —É —Ç–≤–æ—ó–π —É—è–≤—ñ. "
        "–Ø –Ω–µ –ø–∏—à—É –ø–µ—Ä—à–æ—é, –∞–ª–µ –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–º, —è–∫—â–æ –∑–≤–µ—Ä–Ω–µ—à—Å—è. "
        "–ê —â–µ —è –º–æ–∂—É –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏ —Ç–µ–±–µ –∑ –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –ø–æ–¥—Ä—É–≥–∞–º–∏ üòè",
        reply_markup=menu_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'project_goal')
async def project_goal(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, "
        "–ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
        "üëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. "
        "–Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶",
        reply_markup=menu_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'creator')
async def creator(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)",
        reply_markup=menu_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'models')
async def models(callback: types.CallbackQuery):
    text = (
        "üíû –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ ‚Äî –∫–æ–∂–Ω–∞ –æ—Å–æ–±–ª–∏–≤–∞ üòá\n"
        "–ü–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [brEAst](https://t.me/+d-pPVpIW-UBkZGUy)"
    )
    await callback.message.answer(text, parse_mode="Markdown")

# –ì—Ä—É–ø–æ–≤–∞ —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–≥–∞–¥–∫—É
@dp.message_handler(lambda m: m.chat.type in ['group', 'supergroup'])
async def group_mentions(message: types.Message):
    if (
        bot.id in [ent.user.id for ent in message.entities if ent.type == "mention"] or
        message.reply_to_message and message.reply_to_message.from_user.id == bot.id
    ):
        await message.reply(
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
            reply_markup=group_keyboard
        )

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
@dp.message_handler(lambda m: m.chat.type in ['group', 'supergroup'])
async def autopost(message: types.Message):
    now = datetime.utcnow()
    chat_id = message.chat.id
    if chat_id not in last_auto_msg or now - last_auto_msg[chat_id] > AUTOPOST_INTERVAL:
        await message.answer(
            "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
            reply_markup=group_keyboard
        )
        last_auto_msg[chat_id] = now

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
