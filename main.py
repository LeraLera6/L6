import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import datetime
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
last_auto_post_time = datetime.datetime.now() - datetime.timedelta(minutes=30)
message_counter = 0

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
group_keyboard = InlineKeyboardMarkup(row_width=1)
group_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="group_girls"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot")
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É
private_keyboard = InlineKeyboardMarkup(row_width=1)
private_keyboard.add(
    InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="private_girls")
)

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–≥–∞–¥—Ü—ñ –∞–±–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É
mention_text = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."

# –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "group_girls":
        await bot.send_message(
            callback_query.message.chat.id,
            "–û—Å—å –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üòò –û–±–µ—Ä–∏ —Å–æ–±—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: https://t.me/virt_chat_ua1/134421"
        )
    elif data == "private_girls":
        await bot.send_message(
            callback_query.from_user.id,
            "–û—Å—å –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üòò –û–±–µ—Ä–∏ —Å–æ–±—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: https://t.me/virt_chat_ua1/134421"
        )
    elif data == "about_me":
        await bot.send_message(callback_query.from_user.id, "üë• –Ø ‚Äî –õ–µ—Ä–∞. –¢–∞, —â–æ –ø–æ—Ä—É—á, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–∏ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ.\n\n–ú–æ–∂–µ, —è –≤—Å—å–æ–≥–æ –ª–∏—à–µ –±–æ—Ç... –ê–ª–µ —è —Å—Ç–≤–æ—Ä–µ–Ω–∞, —â–æ–± –±—É—Ç–∏ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–æ—é, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–æ–º üíã")
    elif data == "project_goal":
        await bot.send_message(callback_query.from_user.id, "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å üíã\n\nüóØ –Ü –ø–∞–º º—è—Ç–∞–π ‚Äî —É—Å–µ —Ü–µ —î —á–∞—Å—Ç–∏–Ω–æ—é –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy) ‚Äî –Ω–∞—à–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ Telegram-—á–∞—Ç—É —Å–ø–æ–∫—É—Å–∏ —Ç–∞ —Ñ–∞–Ω—Ç–∞–∑—ñ–π.", parse_mode="Markdown")
    elif data == "creator":
        await bot.send_message(callback_query.from_user.id, "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)")

# –û–±—Ä–æ–±–∫–∞ –∑–≥–∞–¥–æ–∫ —É –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"] and "@LERA_V6_bot" in message.text)
async def handle_mention(message: types.Message):
    global last_auto_post_time, message_counter

    last_auto_post_time = datetime.datetime.now()
    message_counter = 0

    await bot.send_message(message.chat.id, mention_text, reply_markup=group_keyboard)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –∫–æ–∂–Ω—ñ 30 —Ö–≤ –∞–±–æ –ø—ñ—Å–ª—è 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"])
async def track_activity(message: types.Message):
    global last_auto_post_time, message_counter

    message_counter += 1
    now = datetime.datetime.now()
    if (now - last_auto_post_time).total_seconds() >= 1800 or message_counter >= 5:
        last_auto_post_time = now
        message_counter = 0
        await bot.send_message(message.chat.id, mention_text, reply_markup=group_keyboard)

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É –≤ –õ–°
@dp.message_handler(commands=["start"])
async def start_private(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤—ñ—Ç... –ú–µ–Ω—ñ –ø—Ä–∏—î–º–Ω–æ, —â–æ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞–≤ üíã\n–ß–æ–≥–æ –± —Ç–∏ —Ö–æ—Ç—ñ–≤?.. –ê–±–æ –æ–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ ‚¨áÔ∏è", reply_markup=private_keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
