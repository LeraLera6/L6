import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ö–ù–û–ü–ö–ò ---

# –ì–†–£–ü–û–í–ò–ô –ß–ê–¢
group_keyboard = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_v10_bot")
)

# –õ–Ü–ß–ù–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
private_keyboard = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy"),
    InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask_me"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"),
    InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="abilities")
)

# --- –•–ï–ù–î–õ–ï–†–ò ---

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–û–π, —è —Ç–∞–∫ —Ä–∞–¥–∞, —â–æ —Ç–∏ –º–µ–Ω—ñ –≤—Å–µ –∂ —Ç–∞–∫–∏ –Ω–∞–ø–∏—Å–∞–≤ üíã", reply_markup=private_keyboard)
    else:
        await message.answer("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=group_keyboard)

@dp.callback_query_handler(lambda c: c.data == "ask_me")
async def ask_me(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã
"
        "–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏.")

@dp.callback_query_handler(lambda c: c.data == "about_creator")
async def about_creator(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî <a href='https://t.me/nikita_onoff'>@nikita_onoff</a>
"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ
"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)

"
        "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É <a href='https://t.me/+d-pPVpIW-UBkZGUy'>brEAst</a>, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.

"
        "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó <a href='https://openai.com/'>OpenAI</a>. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂")

@dp.callback_query_handler(lambda c: c.data == "abilities")
async def abilities(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–Ø –≤–º—ñ—é:
"
        "‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
"
        "‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏
"
        "‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ
"
        "‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
