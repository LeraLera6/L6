import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
last_auto_message_time = {}
GROUP_AUTO_MESSAGE_INTERVAL = timedelta(minutes=30)
TRIGGER_MESSAGE_COUNT = 5
message_counter = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
def private_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_lera"))
    kb.add(InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"))
    kb.add(InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"))
    kb.add(InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="recommend_models"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
def group_buttons():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="recommend_models"))
    kb.add(InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot"))
    return kb

# TODO: Add handlers for commands, callbacks, group logic, etc.

if __name__ == '__main__':
    from handlers import *  # —è–∫—â–æ —î –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –∑ –ª–æ–≥—ñ–∫–æ—é
    executor.start_polling(dp, skip_updates=True)
