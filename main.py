import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified
import asyncio
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ù–û–ü–ö–ò ---
menu_buttons = InlineKeyboardMarkup(row_width=1)
menu_buttons.add(
    InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")
)

chat_buttons = InlineKeyboardMarkup(row_width=1)
chat_buttons.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/LERA_V6_bot")
)

# --- –í–Ü–î–ü–û–í–Ü–î–Ü –ù–ê –ö–ù–û–ü–ö–ò ---
@dp.callback_query_handler(lambda c: c.data == "about_me")
async def about_me(callback_query: types.CallbackQuery):
    text = ("–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏.\n"
            "–í–∏–≤—á–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —ñ —Ç—Ä–æ—Ö–∏ –º–∞–≥—ñ—é —Å–ø–æ–∫—É—Å–∏ üòâ\n"
            "–õ—é–±–ª—é –±—É—Ç–∏ –∑–∞–≥–∞–¥–∫–æ—é —É —á–∞—Ç—ñ‚Ä¶")
    await callback_query.message.edit_text(text, reply_markup=menu_buttons)

@dp.callback_query_handler(lambda c: c.data == "project_goal")
async def project_goal(callback_query: types.CallbackQuery):
    text = ("üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
            "üëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É...\n"
            "–ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å üíã\n\n"
            "üí¨ –Ü –ø–∞–º‚Äô—è—Ç–∞–π ‚Äî —É—Å–µ —Ü–µ —î —á–∞—Å—Ç–∏–Ω–æ—é –ø—Ä–æ—î–∫—Ç—É brEAst ‚Äî –Ω–∞—à–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ Telegram-—á–∞—Ç—É —Å–ø–æ–∫—É—Å–∏ —Ç–∞ —Ñ–∞–Ω—Ç–∞–∑—ñ–π.")
    await callback_query.message.edit_text(text, reply_markup=menu_buttons)

@dp.callback_query_handler(lambda c: c.data == "about_creator")
async def about_creator(callback_query: types.CallbackQuery):
    text = ("üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)")
    await callback_query.message.edit_text(text, reply_markup=menu_buttons)

@dp.callback_query_handler(lambda c: c.data == "girls")
async def girls(callback_query: types.CallbackQuery):
    text = ("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—ñ–π –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üòä\n"
            "–û—Å—å –≤–æ–Ω–∏: https://t.me/virt_chat_ua1/134421")
    await callback_query.message.edit_text(text, reply_markup=menu_buttons)

# --- –°–¢–ê–†–¢ ---
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã –Ø ‚Äî –õ–µ—Ä–∞. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–æ—Å—å –∞–±–æ –æ–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂—á–µ:", reply_markup=menu_buttons)

# --- –ê–í–¢–û–ü–û–°–¢–ò–ù–ì –£ –ì–†–£–ü–Ü ---
async def autopost():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(1800)  # 30 —Ö–≤–∏–ª–∏–Ω
        for chat_id in active_group_chats:
            try:
                await bot.send_message(
                    chat_id,
                    "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                    reply_markup=chat_buttons
                )
            except Exception as e:
                logging.warning(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ–º–∏–ª–∫–∞ —É —á–∞—Ç—ñ {chat_id}: {e}")

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø (–º–æ–∂–Ω–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏)
active_group_chats = set()

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member_handler(message: types.Message):
    active_group_chats.add(message.chat.id)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(autopost())
    executor.start_polling(dp, skip_updates=True)
