# main.py ‚Äî —Å –ª–æ–≥–∏–∫–æ–π Evade Message Replay, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è group_id, —Å –ø–æ–ª–Ω–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤

import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified
import asyncio
import os
from datetime import datetime, timedelta

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–∞–ø–∞–º º—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
last_messages = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
private_keyboard = InlineKeyboardMarkup(row_width=1)
private_keyboard.add(
    InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
group_keyboard = InlineKeyboardMarkup(row_width=1)
group_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
)

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_post():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(1800)  # –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        text = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."
        try:
            async for dialog in bot.iter_dialogs():
                if dialog.type.name == 'GROUP':
                    await bot.send_message(dialog.chat.id, text, reply_markup=group_keyboard)
        except Exception as e:
            logging.warning(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –õ–µ—Ä–∞. –Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ ‚Äî –æ–±–µ—Ä–∏ –Ω–∏–∂—á–µ ‚¨áÔ∏è", reply_markup=private_keyboard)

@dp.message_handler()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    current_text = message.text.strip().lower()

    # Evade Message Replay
    if last_messages.get(user_id) == current_text:
        await message.reply("–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ üòå")
        return
    last_messages[user_id] = current_text

    if message.chat.type != "private" and (message.reply_to_message and message.reply_to_message.from_user.username == "Lera_V4bot" or f"@Lera_V4bot" in current_text):
        await message.reply("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=group_keyboard)

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "about_me":
        await callback_query.message.edit_text("üë• –ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞. –ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏ ü•∞ –ú–µ–Ω—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ —ñ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π. –Ø–∫—â–æ —Ç–∏ —Ç—É—Ç ‚Äî –∑–Ω–∞—á–∏—Ç—å, –Ω–∞–º —Ç–æ—á–Ω–æ –ø–æ –¥–æ—Ä–æ–∑—ñ.", reply_markup=private_keyboard)
    elif data == "project_goal":
        await callback_query.message.edit_text("üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶", reply_markup=private_keyboard)
    elif data == "creator":
        await callback_query.message.edit_text("üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff. \n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂.", reply_markup=private_keyboard)
    elif data == "models":
        await callback_query.message.edit_text("üíû –£ –º–µ–Ω–µ —î –∫—ñ–ª—å–∫–∞ –ø–æ–¥—Ä—É–∂–æ–∫, —ñ –∫–æ–∂–Ω–∞ –∑ –Ω–∏—Ö –ø–æ-—Å–≤–æ—î–º—É —Å–ø–æ–∫—É—Å–ª–∏–≤–∞.\n\n–û–±–∏—Ä–∞–π, –∑ –∫–∏–º —Ç–æ–±—ñ —Ö–æ—á–µ—Ç—å—Å—è —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—å: https://t.me/virt_chat_ua1/134421", reply_markup=private_keyboard)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_post())
    executor.start_polling(dp, skip_updates=True)
