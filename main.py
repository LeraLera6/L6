import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart
from dotenv import load_dotenv
import openai

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

openai.api_key = OPENAI_API_KEY

user_states = {}

menu_keyboard = InlineKeyboardMarkup(row_width=1)
menu_keyboard.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy"),
    InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask_me"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")
)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏.",
        reply_markup=menu_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "ask_me")
async def ask_me_handler(callback_query: types.CallbackQuery):
    user_states[callback_query.from_user.id] = "chat"
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
    )

@dp.callback_query_handler(lambda c: c.data == "about_creator")
async def about_creator_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üßë‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
        "üîß –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst."
    )

@dp.message_handler()
async def gpt_chat(message: types.Message):
    if user_states.get(message.from_user.id) == "chat":
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4.1-mini",
                messages=[{"role": "user", "content": message.text}]
            )
            reply = response.choices[0].message.content.strip()
            await message.reply(reply)
        except Exception as e:
            await message.reply("üò• –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
    else:
        await message.reply("–ù–∞—Ç–∏—Å–Ω–∏ 'üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è', —â–æ–± —è –º–æ–≥–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —è–∫ AI üíã")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
