import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime, timedelta

API_TOKEN = "YOUR_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

last_messages = {}  # chat_id: (datetime, message_count)

# --- –ö–ù–û–ü–ö–ò ---
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
        InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
        InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"),
        InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")
    )
    return keyboard

# --- –•–ï–ù–î–õ–ï–†–ò ---
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üå∏ –Ø –õ–µ—Ä–∞. –ì–æ—Ç–æ–≤–∞ –¥–æ —Ñ–ª—ñ—Ä—Ç—É?", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "about_me")
async def about_me(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üë• –Ø ‚Äî –õ–µ—Ä–∞. AI-–¥—ñ–≤—á–∏–Ω–∞, —è–∫–∞ –≤–º—ñ—î —Å–ª—É—Ö–∞—Ç–∏, —ñ–Ω—Ç—Ä–∏–≥—É–≤–∞—Ç–∏ —ñ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ... üòâ")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "project_goal")
async def project_goal(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
        "üëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶\n\n"
        "üí¨ –î–æ —Ä–µ—á—ñ, –≤–µ—Å—å –ø—Ä–æ—î–∫—Ç –∫—Ä—É—Ç–∏—Ç—å—Å—è –Ω–∞–≤–∫–æ–ª–æ —á–∞—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy) ‚Äî –Ω–µ –ø—Ä–æ–≥–∞–≤ üòâ",
        parse_mode="Markdown")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "about_creator")
async def about_creator(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n"
        "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
        "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "girls")
async def girls(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üíû –û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥: [–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π](https://t.me/virt_chat_ua1/134421)",
        parse_mode="Markdown")
    await callback_query.answer()

# --- –ê–í–¢–û-–ü–û–°–¢–ò–ù–ì –£ –ì–†–£–ü–ê–• ---
@dp.message_handler()
async def handle_group_activity(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        now = datetime.utcnow()
        chat_id = message.chat.id

        if chat_id not in last_messages:
            last_messages[chat_id] = (now, 1)
            return

        last_time, count = last_messages[chat_id]

        if now - last_time > timedelta(minutes=30) or count >= 5:
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls"),
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url=f"https://t.me/{(await bot.get_me()).username}")
            )
            await message.answer("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=keyboard)
            last_messages[chat_id] = (now, 0)
        else:
            last_messages[chat_id] = (last_time, count + 1)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
