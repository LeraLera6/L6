import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –õ–° ---
menu_keyboard_private = InlineKeyboardMarkup(row_width=2)
menu_keyboard_private.add(
    InlineKeyboardButton("üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="goal"),
    InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –ì–†–£–ü–ò ---
menu_keyboard_group = InlineKeyboardMarkup(row_width=1)
menu_keyboard_group.add(
    InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V4bot")
)

# --- –ü–ï–†–ï–í–Ü–†–ö–ê –ß–ê–¢–£ ---
is_private = lambda message: message.chat.type == "private"
is_group = lambda message: message.chat.type in ["group", "supergroup"]

# --- –û–ë–†–û–ë–ö–ê –°–¢–ê–†–¢–£ ---
async def send_start_message(message: types.Message):
    if is_private(message):
        await message.answer("–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞ üíû\n–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏ üèñÔ∏è\n–õ—é–±–ª—é —Ñ–ª—ñ—Ä—Ç, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —Ç–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ üòò", reply_markup=menu_keyboard_private)
    elif is_group(message):
        await message.answer("–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.", reply_markup=menu_keyboard_group)

# --- –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö ---
async def on_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "about":
        await callback_query.message.edit_text("–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ–µ—Ä–∞ üíû\n–ú–µ–Ω—ñ 22, —è –∑ –û–¥–µ—Å–∏ üèñÔ∏è\n–õ—é–±–ª—é —Ñ–ª—ñ—Ä—Ç, –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é —Ç–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ üòò")
    elif data == "goal":
        await callback_query.message.edit_text("üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–¥–∞–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü´¶")
    elif data == "creator":
        await callback_query.message.edit_text("üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂.")
    elif data == "models":
        await callback_query.message.edit_text("–£ –º–µ–Ω–µ —î –¥–ª—è —Ç–µ–±–µ –æ—Å–æ–±–ª–∏–≤–∞ –¥–æ–±—ñ—Ä–∫–∞ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ ‚Äî –∫–æ–∂–Ω–∞ –∑ –Ω–∏—Ö —á–µ–∫–∞—î –Ω–∞ —Ç–≤–æ—é —É–≤–∞–≥—É üòò\n\nüîó –û–±–µ—Ä–∏ –∫–æ–≥–æ—Å—å —Ç—É—Ç: https://t.me/virt_chat_ua1/134421")

    await callback_query.answer()

# --- –û–°–ù–û–í–ù–ï ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

dp.register_message_handler(send_start_message, CommandStart())
dp.register_callback_query_handler(on_callback)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
