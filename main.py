import logging
import os
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

openai.api_key = os.getenv("OPENAI_API_KEY")

START_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")],
    [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy")],
    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")],
    [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")],
])

START_MESSAGE = "–Ø –∑–Ω–∞—é, —á–∏–º —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏ üòâ –û–±–∏—Ä–∞–π –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–Ω—É—Ä—é–π—Å—è..."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_MESSAGE, reply_markup=START_KEYBOARD)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "girls":
        await query.message.reply_text(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶\n"
            "üíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\n"
            "üëâ https://t.me/virt_chat_ua1/134421"
        )

    elif query.data == "creator":
        await query.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n"
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n"
            "(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\n"
            "üí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy), —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
            "ü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó [OpenAI](https://openai.com). –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂",
            parse_mode="Markdown"
        )

    elif query.data == "ask":
        await query.message.reply_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n"
            "–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )
        context.user_data['chat_mode'] = True

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('chat_mode'):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢–∏ —Ñ–ª—ñ—Ä—Ç–æ–≤–∞ AI-–ø–æ–¥—Ä—É–≥–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑ –Ω—ñ–∂–Ω—ñ—Å—Ç—é, –∞–ª–µ –∑ —ñ–Ω—Ç—Ä–∏–≥–æ—é."},
                    {"role": "user", "content": update.message.text},
                ]
            )
            reply_text = response.choices[0].message.content
        except Exception as e:
            reply_text = f"üîß –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n```
{e}
```"
        await update.message.reply_text(reply_text, parse_mode="Markdown")
    else:
        await update.message.reply_text(
            "–Ø —Ç—É—Ç, —â–æ–± —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏!",
            reply_markup=START_KEYBOARD
        )

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()
