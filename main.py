import logging
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from openai import AsyncOpenAI

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI
openai_client = AsyncOpenAI(
    base_url="https://api.openai.com/v1",
    api_key=os.getenv("OPENAI_API_KEY"),
    organization=None,
    project=os.getenv("OPENAI_GPT_ID")
)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
last_post_time = {}
message_count = {}
POST_INTERVAL = timedelta(minutes=30)
POST_MESSAGE = "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥."
POST_BUTTONS = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421")],
    [InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url="https://t.me/Lera_V8_bot")]
])

# –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é –≤ –õ–°
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíû –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls")],
    [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", callback_data="chat18")],
    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask")],
    [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")],
    [InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="skills")]
])

START_TEXT = "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —É –õ–°
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "girls":
        await query.message.reply_text(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ‚Ä¶\nüíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\nüëâ https://t.me/virt_chat_ua1/134421"
        )
    elif query.data == "chat18":
        await query.message.reply_text(
            "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ‚Ä¶\nüîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà\nüëâ https://t.me/+d-pPVpIW-UBkZGUy"
        )
    elif query.data == "ask":
        await query.message.reply_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )
    elif query.data == "creator":
        await query.message.reply_text(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nüí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂"
        )
    elif query.data == "skills":
        await query.message.reply_text(
            "–Ø –≤–º—ñ—é:\n‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏\n‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ\n‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
        )

# –í—ñ–¥–ø–æ–≤—ñ–¥—å GPT
async def ask_gpt(message: str) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": message}],
            temperature=0.8
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"GPT Error: {e}")
        return "–í–∏–±–∞—á, —è —Ç—Ä–æ—Ö–∏ –∑–∞–ø–ª—É—Ç–∞–ª–∞—Å—å‚Ä¶ üòÖ –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        reply = await ask_gpt(update.message.text)
        await update.message.reply_text(reply, reply_markup=MAIN_MENU)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT, reply_markup=MAIN_MENU)

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø–∞—Ö
async def group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_count[chat_id] = message_count.get(chat_id, 0) + 1
    now = datetime.now()
    last_time = last_post_time.get(chat_id, now - timedelta(hours=1))
    if now - last_time > POST_INTERVAL or message_count[chat_id] >= 5:
        await context.bot.send_message(chat_id=chat_id, text=POST_MESSAGE, reply_markup=POST_BUTTONS)
        last_post_time[chat_id] = now
        message_count[chat_id] = 0

# –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS, group_message))
    app.run_polling()
