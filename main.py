import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from openai import OpenAI

# Telegram bot initialization
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)

# OpenAI initialization (v1.0.0+)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Constants
CHAT_LINK = "https://t.me/+d-pPVpIW-UBkZGUy"
MODELS_LINK = "https://t.me/virt_chat_ua1/134421"
OPENAI_LINK = "https://openai.com"

# Main menu
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="girls"),
    InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", callback_data="chat"),
    InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask"),
    InlineKeyboardButton("üë®‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator")
)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üòä\n–Ø –õ–µ—Ä–∞ ‚Äî —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞. –û–±–∏—Ä–∞–π, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –µ:",
        reply_markup=main_menu
    )

@dp.callback_query_handler(lambda c: True)
async def handle_callbacks(callback: types.CallbackQuery):
    data = callback.data

    if data == "girls":
        await callback.message.answer(
            "–£ –º–µ–Ω–µ —î –ø–æ–¥—Ä—É–≥–∏, —è–∫—ñ –≥–æ—Ç–æ–≤—ñ –Ω–∞ –±—ñ–ª—å—à–µ...\nüíã –û–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞ –Ω–∞—Å—Ç—Ä–æ—î–º ‚Äî –æ—Å—å –Ω–∞—à —Å–ø–∏—Å–æ–∫:\nüëâ " + MODELS_LINK
        )
    elif data == "chat":
        await callback.message.answer(
            "–¢–∞–º —É—Å–µ —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ...\nüîû –í—ñ–¥–≤–µ—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏, —ñ–Ω—Ç–∏–º–Ω—ñ –∂–∞—Ä—Ç–∏, —ñ —è –≤ —Ç—Ä–æ—Ö–∏ —ñ–Ω—à–æ–º—É –æ–±—Ä–∞–∑—ñ üòà\nüëâ " + CHAT_LINK
        )
    elif data == "creator":
        await callback.message.answer(
            "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nüí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É brEAst, —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü§ù\n‚¨áÔ∏è " + OPENAI_LINK
        )
    elif data == "ask":
        await callback.message.answer("ü§î –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã")

@dp.message_handler()
async def handle_message(message: types.Message):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": message.text}]
    )
    await message.reply(response.choices[0].message.content)

if __name__ == "__main__":
    executor.start_polling(dp)
