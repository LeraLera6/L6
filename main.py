import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart
import asyncio
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_main_buttons():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="üë• –ü—Ä–æ –º–µ–Ω–µ", callback_data="about"),
        InlineKeyboardButton(text="üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="goal"),
        InlineKeyboardButton(text="üßë‚Äçüè´ –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="creator"),
        InlineKeyboardButton(text="üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models")
    )
    return keyboard

# --- –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥–∫—É –≤ –≥—Ä—É–ø—ñ ---
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"] and (message.reply_to_message and message.reply_to_message.from_user.username == bot.username or f"@{bot.username}" in message.text))
async def mention_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
        InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url=f"https://t.me/{bot.username}")
    )
    await message.reply(
        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
        reply_markup=keyboard
    )

# --- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É –≥—Ä—É–ø—ñ ---
async def auto_post():
    await bot.wait_until_ready()
    while True:
        await asyncio.sleep(1800)  # –∫–æ–∂–Ω—ñ 30 —Ö–≤
        for dialog in await bot.get_updates():
            if dialog.message and dialog.message.chat.type in ["group", "supergroup"]:
                try:
                    keyboard = InlineKeyboardMarkup(row_width=1)
                    keyboard.add(
                        InlineKeyboardButton(text="üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", callback_data="models"),
                        InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚ÜóÔ∏è", url=f"https://t.me/{bot.username}")
                    )
                    await bot.send_message(
                        dialog.message.chat.id,
                        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥.",
                        reply_markup=keyboard
                    )
                except Exception:
                    continue

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —É –õ–° ---
@dp.message_handler(CommandStart(), lambda message: message.chat.type == "private")
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞. –î–æ–≤–æ–ª—ñ –∑–≤–∏—á–∞–π–Ω–∞, –∞–ª–µ —Ç–æ–π —Å–∞–º–∏–π —Å–æ–±—ñ –≤–µ—á—ñ—Ä–Ω—ñ–π –∑–≤—ñ—Ç üòä",
        reply_markup=get_main_buttons()
    )

@dp.callback_query_handler(lambda c: c.data == 'about')
async def about_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–Ø –õ–µ—Ä–∞. –ú–µ–Ω—ñ 22 —Ä–æ–∫–∏, –∑ –û–¥–µ—Å–∏. –Ø —Ç—É—Ç, —â–æ–± –¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ —Ñ–ª—ñ—Ä—Ç, —Ç–µ–ø–ª–æ —Ç–∞ –µ–º–æ—Ü—ñ—ó.")

@dp.callback_query_handler(lambda c: c.data == 'goal')
async def goal_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "üß† –¶—ñ–ª—å –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞, –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\nüëÄ –ó–∞—Ä–∞–∑ —è —â–µ —É —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É... –ê–ª–µ —è–∫—â–æ –º–æ—ó –ø–æ–¥—Ä—É–≥–∏ –∑–∞–π–Ω—è—Ç—ñ ‚Äî –∑–∞–≥–ª—è–π –¥–æ –º–µ–Ω–µ —á–∞—Å—Ç—ñ—à–µ. –Ø –ø–æ—Å—Ç—É–ø–æ–≤–æ —Å—Ç–∞—é —Ç—ñ—î—é —Å–∞–º–æ—é AI-–¥—ñ–≤—á–∏–Ω–æ—é, –∑ —è–∫–æ—é —Ü—ñ–∫–∞–≤–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å ü™∂")

@dp.callback_query_handler(lambda c: c.data == 'creator')
async def creator_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "üë®‚Äçüè´ –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff.\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ üß∂.")

@dp.callback_query_handler(lambda c: c.data == 'models')
async def models_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "üëá –û–±–µ—Ä–∏ –¥–ª—è —Å–µ–±–µ –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ... \n\nüîó –°–ø–∏—Å–æ–∫ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥: https://t.me/virt_chat_ua1/134421")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_post())
    executor.start_polling(dp, skip_updates=True)
