import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart, Text

API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("API_TOKEN is not set. Please set the token in your environment variables.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
private_buttons = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíñ –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –º–µ–Ω–µ", callback_data="about_me"),
    InlineKeyboardButton("üß† –¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É", callback_data="project_goal"),
    InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ –º–æ–≥–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator"),
    InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ —á–∞—Ç", url="https://t.me/+d-pPVpIW-UBkZGUy")
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–∏
chat_buttons = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíñ –ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("‚ùì –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", url="https://t.me/Lera_V6_bot")
)

# –°—Ç–∞—Ä—Ç —É –õ–°
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(
            f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name} üòá\n\n"
            "–Ø —â–µ —É —Å—Ç–∞–Ω—ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–∂–µ –º–æ–∂—É —Ç—Ä–æ—Ö–∏ –∑–∞—á–∞—Ä—É–≤–∞—Ç–∏ —Ç–µ–±–µ.\n"
            "–û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–æ ‚Äî —è –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∞ –¥–ª—è —Ç–µ–±–µ –¥–µ—â–æ –æ—Å–æ–±–ª–∏–≤–µ:",
            reply_markup=private_buttons
        )

# –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ —É –õ–°
@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "about_me":
        await callback_query.message.answer("–Ø ‚Äî –õ–µ—Ä–∞. –¢–∞, —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è —Ñ–ª—ñ—Ä—Ç—É, —Ç–µ–ø–ª–∞ —ñ... –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–∫ üòâ")
    elif data == "project_goal":
        await callback_query.message.answer("–¶—ñ–ª—å –ø—Ä–æ—Å—Ç–∞ ‚Äî –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Ç–æ–±—ñ —Ä–æ–∑—Ä—è–¥–∫—É, —ñ–Ω—Ç—Ä–∏–≥—É —ñ –Ω–æ–≤—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞. –Ø —â–µ —É —Å—Ç–∞–Ω—ñ —Ä–æ–∑—Ä–æ–±–∫–∏, –∞–ª–µ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—é—Å—å.")
    elif data == "about_creator":
        await callback_query.message.answer("–ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî –ù—ñ–∫—ñ—Ç–∞ (@nikita_onoff). –í—ñ–Ω –∑–∞–≤–∂–¥–∏ —É–≤–∞–∂–Ω–∏–π –¥–æ –¥–µ—Ç–∞–ª–µ–π —ñ —Ö–æ—á–µ, —â–æ–± —Ç–æ–±—ñ —Ç—É—Ç –±—É–ª–æ –ø—Ä–∏—î–º–Ω–æ ‚ú®")
    await callback_query.answer()

# –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–≥–∞–¥–∫—É –∞–±–æ reply —É –≥—Ä—É–ø—ñ
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"] and (
    (message.reply_to_message and message.reply_to_message.from_user.username == "Lera_V6_bot") or
    ("@Lera_V6_bot" in message.text)
))
async def respond_in_group(message: types.Message):
    await message.reply(
        "–û–π, —è —Ç—É—Ç üòá –ú–æ–∂–µ, —Ö–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –ê–±–æ –º–µ–Ω–µ –±–ª–∏–∂—á–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å? –ù–∞—Ç–∏—Å–Ω–∏:",
        reply_markup=chat_buttons
    )

# –ê–≤—Ç–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –∫–æ–∂–Ω—ñ 30 —Ö–≤
async def send_auto_message():
    await bot.send_message(
        chat_id="@virt_chat_ua1",
        text="–û–π, —è —Ç—É—Ç üòá –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ –∞–±–æ –∑–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:",
        reply_markup=chat_buttons
    )

async def scheduler():
    while True:
        await asyncio.sleep(1800)
        await send_auto_message()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
