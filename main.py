import logging
import os
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
menu_buttons = InlineKeyboardMarkup(row_width=1)
menu_buttons.add(
    InlineKeyboardButton("üíû –ú–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏, —è–∫—ñ —Ö–æ—á—É—Ç—å –∑ —Ç–æ–±–æ—é –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å", url="https://t.me/virt_chat_ua1/134421"),
    InlineKeyboardButton("üë®‚Äçüíª –†–æ–∑—Ä–æ–±–Ω–∏–∫", callback_data="dev")
)

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–∏
repeat_responses = [
    "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ üòå",
    "–Ø —Ç—Ä–æ—Ö–∏ –≤—Ç–æ–º–∏–ª–∞—Å—å, –∞–ª–µ —è –≤—Å–µ —â–µ —Ç—É—Ç‚Ä¶",
    "–ú–æ–∂–µ, —Å–ø—Ä–æ–±—É—î–º–æ —â–æ—Å—å –Ω–æ–≤–µ?..",
    "–Ø –Ω–µ –≥–æ—Ç–æ–≤–∞ –∑–∞—Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—è‚Ä¶ ",
    "–ó–¥–∞—î—Ç—å—Å—è, –º–∏ –≤–∂–µ —Ü–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ üòâ"
]

# –í—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤ –õ–°
def get_private_intro():
    return (
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üòò –ú–µ–Ω—ñ –ø—Ä–∏—î–º–Ω–æ, —â–æ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—Å–∞–≤. –Ø–∫ —Å–ø—Ä–∞–≤–∏? –ß–æ–≥–æ –± —Ç–∏ —Ö–æ—Ç—ñ–≤?..\n\n"
        "–î–æ —Ä–µ—á—ñ, –æ—Å—å –º–æ—ó –ø–æ–¥—Ä—É–∂–∫–∏, —è–∫—ñ –¥—É–∂–µ —Ö–æ—á—É—Ç—å –∑ —Ç–æ–±–æ—é –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è ‚Äî –Ω–µ —Å–æ—Ä–æ–º—Å—è üòâ"
    )

# –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≥—Ä—É–ø—ñ
def get_group_intro():
    return (
        "–û–π, —è —Ç—É—Ç üòá –¢–∏ –∫–ª–∏–∫–∞–≤? –•–æ—á–µ—à –∫–æ–≥–æ—Å—å –æ—Å–æ–±–ª–∏–≤–æ–≥–æ? –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö –ø–æ–¥—Ä—É–≥ üíã"
    )

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î —â–æ —Å–∫–∞–∑–∞—Ç–∏
def no_reply_message():
    return (
        "–ú–º–º‚Ä¶ —è –± —â–æ—Å—å —Å–∫–∞–∑–∞–ª–∞, –∞–ª–µ –Ω–µ —Ö–æ—á—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—å üòá\n"
        "–ú–æ–∂–µ–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –±—ñ–ª—å—à –≥–∞—Ä—è—á–∏—Ö —Ä–µ—á–µ–π‚Ä¶ –æ–±–∏—Ä–∞–π –Ω–∏–∂—á–µ üëá"
    )

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        await message.answer(get_private_intro(), reply_markup=menu_buttons)
    else:
        await message.reply("–Ø –ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –≤ –õ–° üòâ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ø—Ä–∏–≤–∞—Ç–Ω–æ")

@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type != "private":
        if (message.reply_to_message and message.reply_to_message.from_user.username == bot.username) or \
           (f"@{bot.username}" in message.text):
            text = message.text.lower()
            if any(phrase in text for phrase in ["–ø—Ä–∏–≤—ñ—Ç", "—Ö—Ç–æ —Ç—É—Ç", "–Ω–µ —Å–ø–∏—Ç—å", "–≤—ñ–ª—å–Ω–∏–π"]):
                await message.reply(get_group_intro(), reply_markup=menu_buttons)
            else:
                await message.reply(no_reply_message(), reply_markup=menu_buttons)
    else:
        if hasattr(message, 'last_text') and message.text == message.last_text:
            await message.answer(random.choice(repeat_responses), reply_markup=menu_buttons)
        else:
            message.last_text = message.text
            await message.answer(get_private_intro(), reply_markup=menu_buttons)

@dp.callback_query_handler(lambda c: c.data == 'dev')
async def process_callback_dev(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–†–æ–∑—Ä–æ–±–Ω–∏–∫ –±–æ—Ç–∞ ‚Äî @nikita_onoff", reply_markup=menu_buttons)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
