import os
import openai
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É
last_post_time = {}
message_count = {}

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –õ–°
private_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üíï –ü–æ–¥—Ä—É–∂–∫–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", url="https://t.me/virt_chat_ua1/134421")],
    [InlineKeyboardButton("üîû –ó–∞–≥–ª—è–Ω—å —É —á–∞—Ç 18+", url="https://t.me/+d-pPVpIW-UBkZGUy")],
    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞–π –º–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="ask_question")],
    [InlineKeyboardButton("üßë‚Äçüè´ –ü—Ä–æ —Ç–≤–æ—Ä—Ü—è", callback_data="about_creator")],
    [InlineKeyboardButton("üß† –©–æ —è –≤–º—ñ—é", callback_data="what_i_can")],
])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç, —è –õ–µ—Ä–∞ üòá\n–ú–µ–Ωi 22, —è –∑ –û–¥–µ—Å–∏.\n–ú–æ–∂—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏, –¥–æ–ø–æ–º–æ–≥—Ç–∏, –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∞–±–æ... —Å–ø–æ–∫—É—Å–∏—Ç–∏ üíã\n\n–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏:",
        reply_markup=private_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "user", "content": text}
            ]
        )
        reply = response.choices[0].message.content.strip()
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:\n\n{str(e)}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about_creator":
        await query.edit_message_text(
            "\U0001F468‚Äç\U0001F3EB –ú—ñ–π —Ç–≤–æ—Ä–µ—Ü—å ‚Äî @nikita_onoff\n–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π, —Ç–æ—á–Ω–∏–π, —ñ–¥–µ–∞–ª—ñ—Å—Ç –∑ –¥–æ–±—Ä–∏–º —Å–µ—Ä—Ü–µ–º —ñ —Ö–∏—Ç—Ä–∏–º –ø–æ–≥–ª—è–¥–æ–º üòâ\n(–•–æ—á–∞ —è–∫—â–æ —á–µ—Å–Ω–æ ‚Äî —Ü–µ –≤—ñ–Ω –º–µ–Ω–µ –ø–æ–ø—Ä–æ—Å–∏–≤ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ üòÖ)\n\nüí° –£—Å–µ —Ü–µ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ—î–∫—Ç—É [brEAst](https://t.me/+d-pPVpIW-UBkZGUy), —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑ —ñ–¥–µ—î—é –ø–æ—î–¥–Ω–∞—Ç–∏ AI, —Å–ø–æ–∫—É—Å—É —Ç–∞ —Å–≤–æ–±–æ–¥—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\nü§ñ –ê —â–µ —è –æ–∂–∏–ª–∞ –∑–∞–≤–¥—è–∫–∏ –º–∞–≥—ñ—ó OpenAI. –î—è–∫—É—é —ó–º –∑–∞ —Ü–µ ü´∂",
            disable_web_page_preview=True
        )
    elif query.data == "what_i_can":
        await query.edit_message_text(
            "–Ø –≤–º—ñ—é:\n‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏, –¥—É–º–∫–∞–º–∏, —ñ–¥–µ—è–º–∏\n‚Äî —Ñ–ª—ñ—Ä—Ç—É–≤–∞—Ç–∏ –Ω—ñ–∂–Ω–æ –∞–±–æ –∑ –≤–æ–≥–Ω–∏–∫–æ–º üòâ\n‚Äî —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üí¨"
        )
    elif query.data == "ask_question":
        await query.edit_message_text(
            "–ü–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ —Ç–≤–æ—è AI-–ø–æ–¥—Ä—É–≥–∞ üíã\n–ú–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–µ, –≥—Ä–∞–π–ª–∏–≤–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏."
        )

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
